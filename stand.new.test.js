const Stand=require('./Stand')
const _=require('lodash')
const expect=require('chai').expect
const Points=require('./Points')
const GameOptions=require('./GameOptions')


function makeTwoCardsCombine(arr){
    let cardsCombine=[]
    _.forEach(arr,function(elem){
        let combines=twoCards[[elem[0],elem[2]]]
        _.forEach(combines,function(combine){
            cardsCombine.push([combine,elem[1]])
        })
    })
    return cardsCombine
}

function makeThreeCardsCombine(arr){
    let cardsCombine=[]
    _.forEach(arr,function(elem){
        let combines=threeCards[[elem[0],elem[2]]]
        _.forEach(combines,function(combine){
            cardsCombine.push([combine,elem[1]])
        })
    })
    return cardsCombine
}


// console.log(Double(...OneDeckS17Hard(8,5,false)))
let twoCards={ '13,true': [ [ 1, 2 ], [ 2, 1 ] ],
    '14,true': [ [ 1, 3 ], [ 3, 1 ] ],
    '15,true': [ [ 1, 4 ], [ 4, 1 ] ],
    '16,true': [ [ 1, 5 ], [ 5, 1 ] ],
    '17,true': [ [ 1, 6 ], [ 6, 1 ] ],
    '18,true': [ [ 1, 7 ], [ 7, 1 ] ],
    '19,true': [ [ 1, 8 ], [ 8, 1 ] ],
    '20,true': [ [ 1, 9 ], [ 9, 1 ] ],
    '21,true': [ [ 1, 10 ], [ 10, 1 ] ],
    '5,false': [ [ 2, 3 ], [ 3, 2 ] ],
    '6,false': [ [ 2, 4 ], [ 4, 2 ] ],
    '7,false': [ [ 2, 5 ], [ 3, 4 ], [ 4, 3 ], [ 5, 2 ] ],
    '8,false': [ [ 2, 6 ], [ 3, 5 ], [ 5, 3 ], [ 6, 2 ] ],
    '9,false': [ [ 2, 7 ], [ 3, 6 ], [ 4, 5 ], [ 5, 4 ], [ 6, 3 ], [ 7, 2 ] ],
    '10,false': [ [ 2, 8 ], [ 3, 7 ], [ 4, 6 ], [ 6, 4 ], [ 7, 3 ], [ 8, 2 ] ],
    '11,false':
        [ [ 2, 9 ],
            [ 3, 8 ],
            [ 4, 7 ],
            [ 5, 6 ],
            [ 6, 5 ],
            [ 7, 4 ],
            [ 8, 3 ],
            [ 9, 2 ] ],
    '12,false':
        [ [ 2, 10 ],
            [ 3, 9 ],
            [ 4, 8 ],
            [ 5, 7 ],
            [ 7, 5 ],
            [ 8, 4 ],
            [ 9, 3 ],
            [ 10, 2 ] ],
    '13,false':
        [ [ 3, 10 ],
            [ 4, 9 ],
            [ 5, 8 ],
            [ 6, 7 ],
            [ 7, 6 ],
            [ 8, 5 ],
            [ 9, 4 ],
            [ 10, 3 ] ],
    '14,false': [ [ 4, 10 ], [ 5, 9 ], [ 6, 8 ], [ 8, 6 ], [ 9, 5 ], [ 10, 4 ] ],
    '15,false': [ [ 5, 10 ], [ 6, 9 ], [ 7, 8 ], [ 8, 7 ], [ 9, 6 ], [ 10, 5 ] ],
    '16,false': [ [ 6, 10 ], [ 7, 9 ], [ 9, 7 ], [ 10, 6 ] ],
    '17,false': [ [ 7, 10 ], [ 8, 9 ], [ 9, 8 ], [ 10, 7 ] ],
    '18,false': [ [ 8, 10 ], [ 10, 8 ] ],
    '19,false': [ [ 9, 10 ], [ 10, 9 ] ] }
let splits={ '12,true': [ [ 1, 1 ] ],
    '4,false': [ [ 2, 2 ] ],
    '6,false': [ [ 3, 3 ] ],
    '8,false': [ [ 4, 4 ] ],
    '10,false': [ [ 5, 5 ] ],
    '12,false': [ [ 6, 6 ] ],
    '14,false': [ [ 7, 7 ] ],
    '16,false': [ [ 8, 8 ] ],
    '18,false': [ [ 9, 9 ] ],
    '20,false': [ [ 10, 10 ] ] }
let threeCards={ '13,true': [ [ 1, 1, 1 ] ],
    '14,true': [ [ 1, 1, 2 ], [ 1, 2, 1 ], [ 2, 1, 1 ] ],
    '15,true':
        [ [ 1, 1, 3 ],
            [ 1, 2, 2 ],
            [ 1, 3, 1 ],
            [ 2, 1, 2 ],
            [ 2, 2, 1 ],
            [ 3, 1, 1 ] ],
    '16,true':
        [ [ 1, 1, 4 ],
            [ 1, 2, 3 ],
            [ 1, 3, 2 ],
            [ 1, 4, 1 ],
            [ 2, 1, 3 ],
            [ 2, 3, 1 ],
            [ 3, 1, 2 ],
            [ 3, 2, 1 ],
            [ 4, 1, 1 ] ],
    '17,true':
        [ [ 1, 1, 5 ],
            [ 1, 2, 4 ],
            [ 1, 3, 3 ],
            [ 1, 4, 2 ],
            [ 1, 5, 1 ],
            [ 2, 1, 4 ],
            [ 2, 4, 1 ],
            [ 3, 1, 3 ],
            [ 3, 3, 1 ],
            [ 4, 1, 2 ],
            [ 4, 2, 1 ],
            [ 5, 1, 1 ] ],
    '18,true':
        [ [ 1, 1, 6 ],
            [ 1, 2, 5 ],
            [ 1, 3, 4 ],
            [ 1, 4, 3 ],
            [ 1, 5, 2 ],
            [ 1, 6, 1 ],
            [ 2, 1, 5 ],
            [ 2, 5, 1 ],
            [ 3, 1, 4 ],
            [ 3, 4, 1 ],
            [ 4, 1, 3 ],
            [ 4, 3, 1 ],
            [ 5, 1, 2 ],
            [ 5, 2, 1 ],
            [ 6, 1, 1 ] ],
    '19,true':
        [ [ 1, 1, 7 ],
            [ 1, 2, 6 ],
            [ 1, 3, 5 ],
            [ 1, 4, 4 ],
            [ 1, 5, 3 ],
            [ 1, 6, 2 ],
            [ 1, 7, 1 ],
            [ 2, 1, 6 ],
            [ 2, 6, 1 ],
            [ 3, 1, 5 ],
            [ 3, 5, 1 ],
            [ 4, 1, 4 ],
            [ 4, 4, 1 ],
            [ 5, 1, 3 ],
            [ 5, 3, 1 ],
            [ 6, 1, 2 ],
            [ 6, 2, 1 ],
            [ 7, 1, 1 ] ],
    '20,true':
        [ [ 1, 1, 8 ],
            [ 1, 2, 7 ],
            [ 1, 3, 6 ],
            [ 1, 4, 5 ],
            [ 1, 5, 4 ],
            [ 1, 6, 3 ],
            [ 1, 7, 2 ],
            [ 1, 8, 1 ],
            [ 2, 1, 7 ],
            [ 2, 7, 1 ],
            [ 3, 1, 6 ],
            [ 3, 6, 1 ],
            [ 4, 1, 5 ],
            [ 4, 5, 1 ],
            [ 5, 1, 4 ],
            [ 5, 4, 1 ],
            [ 6, 1, 3 ],
            [ 6, 3, 1 ],
            [ 7, 1, 2 ],
            [ 7, 2, 1 ],
            [ 8, 1, 1 ] ],
    '21,true':
        [ [ 1, 1, 9 ],
            [ 1, 2, 8 ],
            [ 1, 3, 7 ],
            [ 1, 4, 6 ],
            [ 1, 5, 5 ],
            [ 1, 6, 4 ],
            [ 1, 7, 3 ],
            [ 1, 8, 2 ],
            [ 1, 9, 1 ],
            [ 2, 1, 8 ],
            [ 2, 8, 1 ],
            [ 3, 1, 7 ],
            [ 3, 7, 1 ],
            [ 4, 1, 6 ],
            [ 4, 6, 1 ],
            [ 5, 1, 5 ],
            [ 5, 5, 1 ],
            [ 6, 1, 4 ],
            [ 6, 4, 1 ],
            [ 7, 1, 3 ],
            [ 7, 3, 1 ],
            [ 8, 1, 2 ],
            [ 8, 2, 1 ],
            [ 9, 1, 1 ] ],
    '12,false':
        [ [ 1, 1, 10 ],
            [ 1, 2, 9 ],
            [ 1, 3, 8 ],
            [ 1, 4, 7 ],
            [ 1, 5, 6 ],
            [ 1, 6, 5 ],
            [ 1, 7, 4 ],
            [ 1, 8, 3 ],
            [ 1, 9, 2 ],
            [ 1, 10, 1 ],
            [ 2, 1, 9 ],
            [ 2, 2, 8 ],
            [ 2, 3, 7 ],
            [ 2, 4, 6 ],
            [ 2, 5, 5 ],
            [ 2, 6, 4 ],
            [ 2, 7, 3 ],
            [ 2, 8, 2 ],
            [ 2, 9, 1 ],
            [ 3, 1, 8 ],
            [ 3, 2, 7 ],
            [ 3, 3, 6 ],
            [ 3, 4, 5 ],
            [ 3, 5, 4 ],
            [ 3, 6, 3 ],
            [ 3, 7, 2 ],
            [ 3, 8, 1 ],
            [ 4, 1, 7 ],
            [ 4, 2, 6 ],
            [ 4, 3, 5 ],
            [ 4, 4, 4 ],
            [ 4, 5, 3 ],
            [ 4, 6, 2 ],
            [ 4, 7, 1 ],
            [ 5, 1, 6 ],
            [ 5, 2, 5 ],
            [ 5, 3, 4 ],
            [ 5, 4, 3 ],
            [ 5, 5, 2 ],
            [ 5, 6, 1 ],
            [ 6, 1, 5 ],
            [ 6, 2, 4 ],
            [ 6, 3, 3 ],
            [ 6, 4, 2 ],
            [ 6, 5, 1 ],
            [ 7, 1, 4 ],
            [ 7, 2, 3 ],
            [ 7, 3, 2 ],
            [ 7, 4, 1 ],
            [ 8, 1, 3 ],
            [ 8, 2, 2 ],
            [ 8, 3, 1 ],
            [ 9, 1, 2 ],
            [ 9, 2, 1 ],
            [ 10, 1, 1 ] ],
    '13,false':
        [ [ 1, 2, 10 ],
            [ 1, 3, 9 ],
            [ 1, 4, 8 ],
            [ 1, 5, 7 ],
            [ 1, 6, 6 ],
            [ 1, 7, 5 ],
            [ 1, 8, 4 ],
            [ 1, 9, 3 ],
            [ 1, 10, 2 ],
            [ 2, 1, 10 ],
            [ 2, 2, 9 ],
            [ 2, 3, 8 ],
            [ 2, 4, 7 ],
            [ 2, 5, 6 ],
            [ 2, 6, 5 ],
            [ 2, 7, 4 ],
            [ 2, 8, 3 ],
            [ 2, 9, 2 ],
            [ 2, 10, 1 ],
            [ 3, 1, 9 ],
            [ 3, 2, 8 ],
            [ 3, 3, 7 ],
            [ 3, 4, 6 ],
            [ 3, 5, 5 ],
            [ 3, 6, 4 ],
            [ 3, 7, 3 ],
            [ 3, 8, 2 ],
            [ 3, 9, 1 ],
            [ 4, 1, 8 ],
            [ 4, 2, 7 ],
            [ 4, 3, 6 ],
            [ 4, 4, 5 ],
            [ 4, 5, 4 ],
            [ 4, 6, 3 ],
            [ 4, 7, 2 ],
            [ 4, 8, 1 ],
            [ 5, 1, 7 ],
            [ 5, 2, 6 ],
            [ 5, 3, 5 ],
            [ 5, 4, 4 ],
            [ 5, 5, 3 ],
            [ 5, 6, 2 ],
            [ 5, 7, 1 ],
            [ 6, 1, 6 ],
            [ 6, 2, 5 ],
            [ 6, 3, 4 ],
            [ 6, 4, 3 ],
            [ 6, 5, 2 ],
            [ 6, 6, 1 ],
            [ 7, 1, 5 ],
            [ 7, 2, 4 ],
            [ 7, 3, 3 ],
            [ 7, 4, 2 ],
            [ 7, 5, 1 ],
            [ 8, 1, 4 ],
            [ 8, 2, 3 ],
            [ 8, 3, 2 ],
            [ 8, 4, 1 ],
            [ 9, 1, 3 ],
            [ 9, 2, 2 ],
            [ 9, 3, 1 ],
            [ 10, 1, 2 ],
            [ 10, 2, 1 ] ],
    '14,false':
        [ [ 1, 3, 10 ],
            [ 1, 4, 9 ],
            [ 1, 5, 8 ],
            [ 1, 6, 7 ],
            [ 1, 7, 6 ],
            [ 1, 8, 5 ],
            [ 1, 9, 4 ],
            [ 1, 10, 3 ],
            [ 2, 2, 10 ],
            [ 2, 3, 9 ],
            [ 2, 4, 8 ],
            [ 2, 5, 7 ],
            [ 2, 6, 6 ],
            [ 2, 7, 5 ],
            [ 2, 8, 4 ],
            [ 2, 9, 3 ],
            [ 2, 10, 2 ],
            [ 3, 1, 10 ],
            [ 3, 2, 9 ],
            [ 3, 3, 8 ],
            [ 3, 4, 7 ],
            [ 3, 5, 6 ],
            [ 3, 6, 5 ],
            [ 3, 7, 4 ],
            [ 3, 8, 3 ],
            [ 3, 9, 2 ],
            [ 3, 10, 1 ],
            [ 4, 1, 9 ],
            [ 4, 2, 8 ],
            [ 4, 3, 7 ],
            [ 4, 4, 6 ],
            [ 4, 5, 5 ],
            [ 4, 6, 4 ],
            [ 4, 7, 3 ],
            [ 4, 8, 2 ],
            [ 4, 9, 1 ],
            [ 5, 1, 8 ],
            [ 5, 2, 7 ],
            [ 5, 3, 6 ],
            [ 5, 4, 5 ],
            [ 5, 5, 4 ],
            [ 5, 6, 3 ],
            [ 5, 7, 2 ],
            [ 5, 8, 1 ],
            [ 6, 1, 7 ],
            [ 6, 2, 6 ],
            [ 6, 3, 5 ],
            [ 6, 4, 4 ],
            [ 6, 5, 3 ],
            [ 6, 6, 2 ],
            [ 6, 7, 1 ],
            [ 7, 1, 6 ],
            [ 7, 2, 5 ],
            [ 7, 3, 4 ],
            [ 7, 4, 3 ],
            [ 7, 5, 2 ],
            [ 7, 6, 1 ],
            [ 8, 1, 5 ],
            [ 8, 2, 4 ],
            [ 8, 3, 3 ],
            [ 8, 4, 2 ],
            [ 8, 5, 1 ],
            [ 9, 1, 4 ],
            [ 9, 2, 3 ],
            [ 9, 3, 2 ],
            [ 9, 4, 1 ],
            [ 10, 1, 3 ],
            [ 10, 2, 2 ],
            [ 10, 3, 1 ] ],
    '15,false':
        [ [ 1, 4, 10 ],
            [ 1, 5, 9 ],
            [ 1, 6, 8 ],
            [ 1, 7, 7 ],
            [ 1, 8, 6 ],
            [ 1, 9, 5 ],
            [ 1, 10, 4 ],
            [ 2, 3, 10 ],
            [ 2, 4, 9 ],
            [ 2, 5, 8 ],
            [ 2, 6, 7 ],
            [ 2, 7, 6 ],
            [ 2, 8, 5 ],
            [ 2, 9, 4 ],
            [ 2, 10, 3 ],
            [ 3, 2, 10 ],
            [ 3, 3, 9 ],
            [ 3, 4, 8 ],
            [ 3, 5, 7 ],
            [ 3, 6, 6 ],
            [ 3, 7, 5 ],
            [ 3, 8, 4 ],
            [ 3, 9, 3 ],
            [ 3, 10, 2 ],
            [ 4, 1, 10 ],
            [ 4, 2, 9 ],
            [ 4, 3, 8 ],
            [ 4, 4, 7 ],
            [ 4, 5, 6 ],
            [ 4, 6, 5 ],
            [ 4, 7, 4 ],
            [ 4, 8, 3 ],
            [ 4, 9, 2 ],
            [ 4, 10, 1 ],
            [ 5, 1, 9 ],
            [ 5, 2, 8 ],
            [ 5, 3, 7 ],
            [ 5, 4, 6 ],
            [ 5, 5, 5 ],
            [ 5, 6, 4 ],
            [ 5, 7, 3 ],
            [ 5, 8, 2 ],
            [ 5, 9, 1 ],
            [ 6, 1, 8 ],
            [ 6, 2, 7 ],
            [ 6, 3, 6 ],
            [ 6, 4, 5 ],
            [ 6, 5, 4 ],
            [ 6, 6, 3 ],
            [ 6, 7, 2 ],
            [ 6, 8, 1 ],
            [ 7, 1, 7 ],
            [ 7, 2, 6 ],
            [ 7, 3, 5 ],
            [ 7, 4, 4 ],
            [ 7, 5, 3 ],
            [ 7, 6, 2 ],
            [ 7, 7, 1 ],
            [ 8, 1, 6 ],
            [ 8, 2, 5 ],
            [ 8, 3, 4 ],
            [ 8, 4, 3 ],
            [ 8, 5, 2 ],
            [ 8, 6, 1 ],
            [ 9, 1, 5 ],
            [ 9, 2, 4 ],
            [ 9, 3, 3 ],
            [ 9, 4, 2 ],
            [ 9, 5, 1 ],
            [ 10, 1, 4 ],
            [ 10, 2, 3 ],
            [ 10, 3, 2 ],
            [ 10, 4, 1 ] ],
    '16,false':
        [ [ 1, 5, 10 ],
            [ 1, 6, 9 ],
            [ 1, 7, 8 ],
            [ 1, 8, 7 ],
            [ 1, 9, 6 ],
            [ 1, 10, 5 ],
            [ 2, 4, 10 ],
            [ 2, 5, 9 ],
            [ 2, 6, 8 ],
            [ 2, 7, 7 ],
            [ 2, 8, 6 ],
            [ 2, 9, 5 ],
            [ 2, 10, 4 ],
            [ 3, 3, 10 ],
            [ 3, 4, 9 ],
            [ 3, 5, 8 ],
            [ 3, 6, 7 ],
            [ 3, 7, 6 ],
            [ 3, 8, 5 ],
            [ 3, 9, 4 ],
            [ 3, 10, 3 ],
            [ 4, 2, 10 ],
            [ 4, 3, 9 ],
            [ 4, 4, 8 ],
            [ 4, 5, 7 ],
            [ 4, 6, 6 ],
            [ 4, 7, 5 ],
            [ 4, 8, 4 ],
            [ 4, 9, 3 ],
            [ 4, 10, 2 ],
            [ 5, 1, 10 ],
            [ 5, 2, 9 ],
            [ 5, 3, 8 ],
            [ 5, 4, 7 ],
            [ 5, 5, 6 ],
            [ 5, 6, 5 ],
            [ 5, 7, 4 ],
            [ 5, 8, 3 ],
            [ 5, 9, 2 ],
            [ 5, 10, 1 ],
            [ 6, 1, 9 ],
            [ 6, 2, 8 ],
            [ 6, 3, 7 ],
            [ 6, 4, 6 ],
            [ 6, 5, 5 ],
            [ 6, 6, 4 ],
            [ 6, 7, 3 ],
            [ 6, 8, 2 ],
            [ 6, 9, 1 ],
            [ 7, 1, 8 ],
            [ 7, 2, 7 ],
            [ 7, 3, 6 ],
            [ 7, 4, 5 ],
            [ 7, 5, 4 ],
            [ 7, 6, 3 ],
            [ 7, 7, 2 ],
            [ 7, 8, 1 ],
            [ 8, 1, 7 ],
            [ 8, 2, 6 ],
            [ 8, 3, 5 ],
            [ 8, 4, 4 ],
            [ 8, 5, 3 ],
            [ 8, 6, 2 ],
            [ 8, 7, 1 ],
            [ 9, 1, 6 ],
            [ 9, 2, 5 ],
            [ 9, 3, 4 ],
            [ 9, 4, 3 ],
            [ 9, 5, 2 ],
            [ 9, 6, 1 ],
            [ 10, 1, 5 ],
            [ 10, 2, 4 ],
            [ 10, 3, 3 ],
            [ 10, 4, 2 ],
            [ 10, 5, 1 ] ],
    '17,false':
        [ [ 1, 6, 10 ],
            [ 1, 7, 9 ],
            [ 1, 8, 8 ],
            [ 1, 9, 7 ],
            [ 1, 10, 6 ],
            [ 2, 5, 10 ],
            [ 2, 6, 9 ],
            [ 2, 7, 8 ],
            [ 2, 8, 7 ],
            [ 2, 9, 6 ],
            [ 2, 10, 5 ],
            [ 3, 4, 10 ],
            [ 3, 5, 9 ],
            [ 3, 6, 8 ],
            [ 3, 7, 7 ],
            [ 3, 8, 6 ],
            [ 3, 9, 5 ],
            [ 3, 10, 4 ],
            [ 4, 3, 10 ],
            [ 4, 4, 9 ],
            [ 4, 5, 8 ],
            [ 4, 6, 7 ],
            [ 4, 7, 6 ],
            [ 4, 8, 5 ],
            [ 4, 9, 4 ],
            [ 4, 10, 3 ],
            [ 5, 2, 10 ],
            [ 5, 3, 9 ],
            [ 5, 4, 8 ],
            [ 5, 5, 7 ],
            [ 5, 6, 6 ],
            [ 5, 7, 5 ],
            [ 5, 8, 4 ],
            [ 5, 9, 3 ],
            [ 5, 10, 2 ],
            [ 6, 1, 10 ],
            [ 6, 2, 9 ],
            [ 6, 3, 8 ],
            [ 6, 4, 7 ],
            [ 6, 5, 6 ],
            [ 6, 6, 5 ],
            [ 6, 7, 4 ],
            [ 6, 8, 3 ],
            [ 6, 9, 2 ],
            [ 6, 10, 1 ],
            [ 7, 1, 9 ],
            [ 7, 2, 8 ],
            [ 7, 3, 7 ],
            [ 7, 4, 6 ],
            [ 7, 5, 5 ],
            [ 7, 6, 4 ],
            [ 7, 7, 3 ],
            [ 7, 8, 2 ],
            [ 7, 9, 1 ],
            [ 8, 1, 8 ],
            [ 8, 2, 7 ],
            [ 8, 3, 6 ],
            [ 8, 4, 5 ],
            [ 8, 5, 4 ],
            [ 8, 6, 3 ],
            [ 8, 7, 2 ],
            [ 8, 8, 1 ],
            [ 9, 1, 7 ],
            [ 9, 2, 6 ],
            [ 9, 3, 5 ],
            [ 9, 4, 4 ],
            [ 9, 5, 3 ],
            [ 9, 6, 2 ],
            [ 9, 7, 1 ],
            [ 10, 1, 6 ],
            [ 10, 2, 5 ],
            [ 10, 3, 4 ],
            [ 10, 4, 3 ],
            [ 10, 5, 2 ],
            [ 10, 6, 1 ] ],
    '18,false':
        [ [ 1, 7, 10 ],
            [ 1, 8, 9 ],
            [ 1, 9, 8 ],
            [ 1, 10, 7 ],
            [ 2, 6, 10 ],
            [ 2, 7, 9 ],
            [ 2, 8, 8 ],
            [ 2, 9, 7 ],
            [ 2, 10, 6 ],
            [ 3, 5, 10 ],
            [ 3, 6, 9 ],
            [ 3, 7, 8 ],
            [ 3, 8, 7 ],
            [ 3, 9, 6 ],
            [ 3, 10, 5 ],
            [ 4, 4, 10 ],
            [ 4, 5, 9 ],
            [ 4, 6, 8 ],
            [ 4, 7, 7 ],
            [ 4, 8, 6 ],
            [ 4, 9, 5 ],
            [ 4, 10, 4 ],
            [ 5, 3, 10 ],
            [ 5, 4, 9 ],
            [ 5, 5, 8 ],
            [ 5, 6, 7 ],
            [ 5, 7, 6 ],
            [ 5, 8, 5 ],
            [ 5, 9, 4 ],
            [ 5, 10, 3 ],
            [ 6, 2, 10 ],
            [ 6, 3, 9 ],
            [ 6, 4, 8 ],
            [ 6, 5, 7 ],
            [ 6, 6, 6 ],
            [ 6, 7, 5 ],
            [ 6, 8, 4 ],
            [ 6, 9, 3 ],
            [ 6, 10, 2 ],
            [ 7, 1, 10 ],
            [ 7, 2, 9 ],
            [ 7, 3, 8 ],
            [ 7, 4, 7 ],
            [ 7, 5, 6 ],
            [ 7, 6, 5 ],
            [ 7, 7, 4 ],
            [ 7, 8, 3 ],
            [ 7, 9, 2 ],
            [ 7, 10, 1 ],
            [ 8, 1, 9 ],
            [ 8, 2, 8 ],
            [ 8, 3, 7 ],
            [ 8, 4, 6 ],
            [ 8, 5, 5 ],
            [ 8, 6, 4 ],
            [ 8, 7, 3 ],
            [ 8, 8, 2 ],
            [ 8, 9, 1 ],
            [ 9, 1, 8 ],
            [ 9, 2, 7 ],
            [ 9, 3, 6 ],
            [ 9, 4, 5 ],
            [ 9, 5, 4 ],
            [ 9, 6, 3 ],
            [ 9, 7, 2 ],
            [ 9, 8, 1 ],
            [ 10, 1, 7 ],
            [ 10, 2, 6 ],
            [ 10, 3, 5 ],
            [ 10, 4, 4 ],
            [ 10, 5, 3 ],
            [ 10, 6, 2 ],
            [ 10, 7, 1 ] ],
    '19,false':
        [ [ 1, 8, 10 ],
            [ 1, 9, 9 ],
            [ 1, 10, 8 ],
            [ 2, 7, 10 ],
            [ 2, 8, 9 ],
            [ 2, 9, 8 ],
            [ 2, 10, 7 ],
            [ 3, 6, 10 ],
            [ 3, 7, 9 ],
            [ 3, 8, 8 ],
            [ 3, 9, 7 ],
            [ 3, 10, 6 ],
            [ 4, 5, 10 ],
            [ 4, 6, 9 ],
            [ 4, 7, 8 ],
            [ 4, 8, 7 ],
            [ 4, 9, 6 ],
            [ 4, 10, 5 ],
            [ 5, 4, 10 ],
            [ 5, 5, 9 ],
            [ 5, 6, 8 ],
            [ 5, 7, 7 ],
            [ 5, 8, 6 ],
            [ 5, 9, 5 ],
            [ 5, 10, 4 ],
            [ 6, 3, 10 ],
            [ 6, 4, 9 ],
            [ 6, 5, 8 ],
            [ 6, 6, 7 ],
            [ 6, 7, 6 ],
            [ 6, 8, 5 ],
            [ 6, 9, 4 ],
            [ 6, 10, 3 ],
            [ 7, 2, 10 ],
            [ 7, 3, 9 ],
            [ 7, 4, 8 ],
            [ 7, 5, 7 ],
            [ 7, 6, 6 ],
            [ 7, 7, 5 ],
            [ 7, 8, 4 ],
            [ 7, 9, 3 ],
            [ 7, 10, 2 ],
            [ 8, 1, 10 ],
            [ 8, 2, 9 ],
            [ 8, 3, 8 ],
            [ 8, 4, 7 ],
            [ 8, 5, 6 ],
            [ 8, 6, 5 ],
            [ 8, 7, 4 ],
            [ 8, 8, 3 ],
            [ 8, 9, 2 ],
            [ 8, 10, 1 ],
            [ 9, 1, 9 ],
            [ 9, 2, 8 ],
            [ 9, 3, 7 ],
            [ 9, 4, 6 ],
            [ 9, 5, 5 ],
            [ 9, 6, 4 ],
            [ 9, 7, 3 ],
            [ 9, 8, 2 ],
            [ 9, 9, 1 ],
            [ 10, 1, 8 ],
            [ 10, 2, 7 ],
            [ 10, 3, 6 ],
            [ 10, 4, 5 ],
            [ 10, 5, 4 ],
            [ 10, 6, 3 ],
            [ 10, 7, 2 ],
            [ 10, 8, 1 ] ],
    '20,false':
        [ [ 1, 9, 10 ],
            [ 1, 10, 9 ],
            [ 2, 8, 10 ],
            [ 2, 9, 9 ],
            [ 2, 10, 8 ],
            [ 3, 7, 10 ],
            [ 3, 8, 9 ],
            [ 3, 9, 8 ],
            [ 3, 10, 7 ],
            [ 4, 6, 10 ],
            [ 4, 7, 9 ],
            [ 4, 8, 8 ],
            [ 4, 9, 7 ],
            [ 4, 10, 6 ],
            [ 5, 5, 10 ],
            [ 5, 6, 9 ],
            [ 5, 7, 8 ],
            [ 5, 8, 7 ],
            [ 5, 9, 6 ],
            [ 5, 10, 5 ],
            [ 6, 4, 10 ],
            [ 6, 5, 9 ],
            [ 6, 6, 8 ],
            [ 6, 7, 7 ],
            [ 6, 8, 6 ],
            [ 6, 9, 5 ],
            [ 6, 10, 4 ],
            [ 7, 3, 10 ],
            [ 7, 4, 9 ],
            [ 7, 5, 8 ],
            [ 7, 6, 7 ],
            [ 7, 7, 6 ],
            [ 7, 8, 5 ],
            [ 7, 9, 4 ],
            [ 7, 10, 3 ],
            [ 8, 2, 10 ],
            [ 8, 3, 9 ],
            [ 8, 4, 8 ],
            [ 8, 5, 7 ],
            [ 8, 6, 6 ],
            [ 8, 7, 5 ],
            [ 8, 8, 4 ],
            [ 8, 9, 3 ],
            [ 8, 10, 2 ],
            [ 9, 1, 10 ],
            [ 9, 2, 9 ],
            [ 9, 3, 8 ],
            [ 9, 4, 7 ],
            [ 9, 5, 6 ],
            [ 9, 6, 5 ],
            [ 9, 7, 4 ],
            [ 9, 8, 3 ],
            [ 9, 9, 2 ],
            [ 9, 10, 1 ],
            [ 10, 1, 9 ],
            [ 10, 2, 8 ],
            [ 10, 3, 7 ],
            [ 10, 4, 6 ],
            [ 10, 5, 5 ],
            [ 10, 6, 4 ],
            [ 10, 7, 3 ],
            [ 10, 8, 2 ],
            [ 10, 9, 1 ] ],
    '21,false':
        [ [ 1, 10, 10 ],
            [ 2, 9, 10 ],
            [ 2, 10, 9 ],
            [ 3, 8, 10 ],
            [ 3, 9, 9 ],
            [ 3, 10, 8 ],
            [ 4, 7, 10 ],
            [ 4, 8, 9 ],
            [ 4, 9, 8 ],
            [ 4, 10, 7 ],
            [ 5, 6, 10 ],
            [ 5, 7, 9 ],
            [ 5, 8, 8 ],
            [ 5, 9, 7 ],
            [ 5, 10, 6 ],
            [ 6, 5, 10 ],
            [ 6, 6, 9 ],
            [ 6, 7, 8 ],
            [ 6, 8, 7 ],
            [ 6, 9, 6 ],
            [ 6, 10, 5 ],
            [ 7, 4, 10 ],
            [ 7, 5, 9 ],
            [ 7, 6, 8 ],
            [ 7, 7, 7 ],
            [ 7, 8, 6 ],
            [ 7, 9, 5 ],
            [ 7, 10, 4 ],
            [ 8, 3, 10 ],
            [ 8, 4, 9 ],
            [ 8, 5, 8 ],
            [ 8, 6, 7 ],
            [ 8, 7, 6 ],
            [ 8, 8, 5 ],
            [ 8, 9, 4 ],
            [ 8, 10, 3 ],
            [ 9, 2, 10 ],
            [ 9, 3, 9 ],
            [ 9, 4, 8 ],
            [ 9, 5, 7 ],
            [ 9, 6, 6 ],
            [ 9, 7, 5 ],
            [ 9, 8, 4 ],
            [ 9, 9, 3 ],
            [ 9, 10, 2 ],
            [ 10, 1, 10 ],
            [ 10, 2, 9 ],
            [ 10, 3, 8 ],
            [ 10, 4, 7 ],
            [ 10, 5, 6 ],
            [ 10, 6, 5 ],
            [ 10, 7, 4 ],
            [ 10, 8, 3 ],
            [ 10, 9, 2 ],
            [ 10, 10, 1 ] ],
    '6,false': [ [ 2, 2, 2 ] ],
    '7,false': [ [ 2, 2, 3 ], [ 2, 3, 2 ], [ 3, 2, 2 ] ],
    '8,false':
        [ [ 2, 2, 4 ],
            [ 2, 3, 3 ],
            [ 2, 4, 2 ],
            [ 3, 2, 3 ],
            [ 3, 3, 2 ],
            [ 4, 2, 2 ] ],
    '9,false':
        [ [ 2, 2, 5 ],
            [ 2, 3, 4 ],
            [ 2, 4, 3 ],
            [ 2, 5, 2 ],
            [ 3, 2, 4 ],
            [ 3, 3, 3 ],
            [ 3, 4, 2 ],
            [ 4, 2, 3 ],
            [ 4, 3, 2 ],
            [ 5, 2, 2 ] ],
    '10,false':
        [ [ 2, 2, 6 ],
            [ 2, 3, 5 ],
            [ 2, 4, 4 ],
            [ 2, 5, 3 ],
            [ 2, 6, 2 ],
            [ 3, 2, 5 ],
            [ 3, 3, 4 ],
            [ 3, 4, 3 ],
            [ 3, 5, 2 ],
            [ 4, 2, 4 ],
            [ 4, 3, 3 ],
            [ 4, 4, 2 ],
            [ 5, 2, 3 ],
            [ 5, 3, 2 ],
            [ 6, 2, 2 ] ],
    '11,false':
        [ [ 2, 2, 7 ],
            [ 2, 3, 6 ],
            [ 2, 4, 5 ],
            [ 2, 5, 4 ],
            [ 2, 6, 3 ],
            [ 2, 7, 2 ],
            [ 3, 2, 6 ],
            [ 3, 3, 5 ],
            [ 3, 4, 4 ],
            [ 3, 5, 3 ],
            [ 3, 6, 2 ],
            [ 4, 2, 5 ],
            [ 4, 3, 4 ],
            [ 4, 4, 3 ],
            [ 4, 5, 2 ],
            [ 5, 2, 4 ],
            [ 5, 3, 3 ],
            [ 5, 4, 2 ],
            [ 6, 2, 3 ],
            [ 6, 3, 2 ],
            [ 7, 2, 2 ] ] }
let combineH=[
    [ 5, 1, false ],
    [ 5, 2, false ],
    [ 5, 3, false ],
    [ 5, 4, false ],
    [ 5, 5, false ],
    [ 5, 6, false ],
    [ 5, 7, false ],
    [ 5, 8, false ],
    [ 5, 9, false ],
    [ 5, 10, false ],
    [ 6, 1, false ],
    [ 6, 2, false ],
    [ 6, 3, false ],
    [ 6, 4, false ],
    [ 6, 5, false ],
    [ 6, 6, false ],
    [ 6, 7, false ],
    [ 6, 8, false ],
    [ 6, 9, false ],
    [ 6, 10, false ],
    [ 7, 1, false ],
    [ 7, 2, false ],
    [ 7, 3, false ],
    [ 7, 4, false ],
    [ 7, 5, false ],
    [ 7, 6, false ],
    [ 7, 7, false ],
    [ 7, 8, false ],
    [ 7, 9, false ],
    [ 7, 10, false ],
    [ 8, 1, false ],
    [ 8, 2, false ],
    [ 8, 3, false ],
    [ 8, 4, false ],
    [ 8, 5, false ],
    [ 8, 6, false ],
    [ 8, 7, false ],
    [ 8, 8, false ],
    [ 8, 9, false ],
    [ 8, 10, false ],
    [ 9, 1, false ],
    [ 9, 2, false ],
    [ 9, 3, false ],
    [ 9, 4, false ],
    [ 9, 5, false ],
    [ 9, 6, false ],
    [ 9, 7, false ],
    [ 9, 8, false ],
    [ 9, 9, false ],
    [ 9, 10, false ],
    [ 10, 1, false ],
    [ 10, 2, false ],
    [ 10, 3, false ],
    [ 10, 4, false ],
    [ 10, 5, false ],
    [ 10, 6, false ],
    [ 10, 7, false ],
    [ 10, 8, false ],
    [ 10, 9, false ],
    [ 10, 10, false ],
    [ 11, 1, false ],
    [ 11, 2, false ],
    [ 11, 3, false ],
    [ 11, 4, false ],
    [ 11, 5, false ],
    [ 11, 6, false ],
    [ 11, 7, false ],
    [ 11, 8, false ],
    [ 11, 9, false ],
    [ 11, 10, false ],
    [ 12, 1, false ],
    [ 12, 2, false ],
    [ 12, 3, false ],
    [ 12, 4, false ],
    [ 12, 5, false ],
    [ 12, 6, false ],
    [ 12, 7, false ],
    [ 12, 8, false ],
    [ 12, 9, false ],
    [ 12, 10, false ],
    [ 13, 1, false ],
    [ 13, 2, false ],
    [ 13, 3, false ],
    [ 13, 4, false ],
    [ 13, 5, false ],
    [ 13, 6, false ],
    [ 13, 7, false ],
    [ 13, 8, false ],
    [ 13, 9, false ],
    [ 13, 10, false ],
    [ 14, 1, false ],
    [ 14, 2, false ],
    [ 14, 3, false ],
    [ 14, 4, false ],
    [ 14, 5, false ],
    [ 14, 6, false ],
    [ 14, 7, false ],
    [ 14, 8, false ],
    [ 14, 9, false ],
    [ 14, 10, false ],
    [ 15, 1, false ],
    [ 15, 2, false ],
    [ 15, 3, false ],
    [ 15, 4, false ],
    [ 15, 5, false ],
    [ 15, 6, false ],
    [ 15, 7, false ],
    [ 15, 8, false ],
    [ 15, 9, false ],
    [ 15, 10, false ],
    [ 16, 1, false ],
    [ 16, 2, false ],
    [ 16, 3, false ],
    [ 16, 4, false ],
    [ 16, 5, false ],
    [ 16, 6, false ],
    [ 16, 7, false ],
    [ 16, 8, false ],
    [ 16, 9, false ],
    [ 16, 10, false ],
    [ 17, 1, false ],
    [ 17, 2, false ],
    [ 17, 3, false ],
    [ 17, 4, false ],
    [ 17, 5, false ],
    [ 17, 6, false ],
    [ 17, 7, false ],
    [ 17, 8, false ],
    [ 17, 9, false ],
    [ 17, 10, false ],
    [ 18, 1, false ],
    [ 18, 2, false ],
    [ 18, 3, false ],
    [ 18, 4, false ],
    [ 18, 5, false ],
    [ 18, 6, false ],
    [ 18, 7, false ],
    [ 18, 8, false ],
    [ 18, 9, false ],
    [ 18, 10, false ],
    [ 19, 1, false ],
    [ 19, 2, false ],
    [ 19, 3, false ],
    [ 19, 4, false ],
    [ 19, 5, false ],
    [ 19, 6, false ],
    [ 19, 7, false ],
    [ 19, 8, false ],
    [ 19, 9, false ],
    [ 19, 10, false ],
    [ 20, 1, false ],
    [ 20, 2, false ],
    [ 20, 3, false ],
    [ 20, 4, false ],
    [ 20, 5, false ],
    [ 20, 6, false ],
    [ 20, 7, false ],
    [ 20, 8, false ],
    [ 20, 9, false ],
    [ 20, 10, false ],
    [ 21, 1, false ],
    [ 21, 2, false ],
    [ 21, 3, false ],
    [ 21, 4, false ],
    [ 21, 5, false ],
    [ 21, 6, false ],
    [ 21, 7, false ],
    [ 21, 8, false ],
    [ 21, 9, false ],
    [ 21, 10, false ],
    
]
let combineS=[
    [ 5, 1, true ],
    [ 5, 2, true ],
    [ 5, 3, true ],
    [ 5, 4, true ],
    [ 5, 5, true ],
    [ 5, 6, true ],
    [ 5, 7, true ],
    [ 5, 8, true ],
    [ 5, 9, true ],
    [ 5, 10, true ],
    [ 6, 1, true ],
    [ 6, 2, true ],
    [ 6, 3, true ],
    [ 6, 4, true ],
    [ 6, 5, true ],
    [ 6, 6, true ],
    [ 6, 7, true ],
    [ 6, 8, true ],
    [ 6, 9, true ],
    [ 6, 10, true ],
    [ 7, 1, true ],
    [ 7, 2, true ],
    [ 7, 3, true ],
    [ 7, 4, true ],
    [ 7, 5, true ],
    [ 7, 6, true ],
    [ 7, 7, true ],
    [ 7, 8, true ],
    [ 7, 9, true ],
    [ 7, 10, true ],
    [ 8, 1, true ],
    [ 8, 2, true ],
    [ 8, 3, true ],
    [ 8, 4, true ],
    [ 8, 5, true ],
    [ 8, 6, true ],
    [ 8, 7, true ],
    [ 8, 8, true ],
    [ 8, 9, true ],
    [ 8, 10, true ],
    [ 9, 1, true ],
    [ 9, 2, true ],
    [ 9, 3, true ],
    [ 9, 4, true ],
    [ 9, 5, true ],
    [ 9, 6, true ],
    [ 9, 7, true ],
    [ 9, 8, true ],
    [ 9, 9, true ],
    [ 9, 10, true ],
    [ 10, 1, true ],
    [ 10, 2, true ],
    [ 10, 3, true ],
    [ 10, 4, true ],
    [ 10, 5, true ],
    [ 10, 6, true ],
    [ 10, 7, true ],
    [ 10, 8, true ],
    [ 10, 9, true ],
    [ 10, 10, true ],
    [ 11, 1, true ],
    [ 11, 2, true ],
    [ 11, 3, true ],
    [ 11, 4, true ],
    [ 11, 5, true ],
    [ 11, 6, true ],
    [ 11, 7, true ],
    [ 11, 8, true ],
    [ 11, 9, true ],
    [ 11, 10, true ],
    [ 12, 1, true ],
    [ 12, 2, true ],
    [ 12, 3, true ],
    [ 12, 4, true ],
    [ 12, 5, true ],
    [ 12, 6, true ],
    [ 12, 7, true ],
    [ 12, 8, true ],
    [ 12, 9, true ],
    [ 12, 10, true ],
    [ 13, 1, true ],
    [ 13, 2, true ],
    [ 13, 3, true ],
    [ 13, 4, true ],
    [ 13, 5, true ],
    [ 13, 6, true ],
    [ 13, 7, true ],
    [ 13, 8, true ],
    [ 13, 9, true ],
    [ 13, 10, true ],
    [ 14, 1, true ],
    [ 14, 2, true ],
    [ 14, 3, true ],
    [ 14, 4, true ],
    [ 14, 5, true ],
    [ 14, 6, true ],
    [ 14, 7, true ],
    [ 14, 8, true ],
    [ 14, 9, true ],
    [ 14, 10, true ],
    [ 15, 1, true ],
    [ 15, 2, true ],
    [ 15, 3, true ],
    [ 15, 4, true ],
    [ 15, 5, true ],
    [ 15, 6, true ],
    [ 15, 7, true ],
    [ 15, 8, true ],
    [ 15, 9, true ],
    [ 15, 10, true ],
    [ 16, 1, true ],
    [ 16, 2, true ],
    [ 16, 3, true ],
    [ 16, 4, true ],
    [ 16, 5, true ],
    [ 16, 6, true ],
    [ 16, 7, true ],
    [ 16, 8, true ],
    [ 16, 9, true ],
    [ 16, 10, true ],
    [ 17, 1, true ],
    [ 17, 2, true ],
    [ 17, 3, true ],
    [ 17, 4, true ],
    [ 17, 5, true ],
    [ 17, 6, true ],
    [ 17, 7, true ],
    [ 17, 8, true ],
    [ 17, 9, true ],
    [ 17, 10, true ],
    [ 18, 1, true ],
    [ 18, 2, true ],
    [ 18, 3, true ],
    [ 18, 4, true ],
    [ 18, 5, true ],
    [ 18, 6, true ],
    [ 18, 7, true ],
    [ 18, 8, true ],
    [ 18, 9, true ],
    [ 18, 10, true ],
    [ 19, 1, true ],
    [ 19, 2, true ],
    [ 19, 3, true ],
    [ 19, 4, true ],
    [ 19, 5, true ],
    [ 19, 6, true ],
    [ 19, 7, true ],
    [ 19, 8, true ],
    [ 19, 9, true ],
    [ 19, 10, true ],
    [ 20, 1, true ],
    [ 20, 2, true ],
    [ 20, 3, true ],
    [ 20, 4, true ],
    [ 20, 5, true ],
    [ 20, 6, true ],
    [ 20, 7, true ],
    [ 20, 8, true ],
    [ 20, 9, true ],
    [ 20, 10, true ],
    [ 21, 1, true ],
    [ 21, 2, true ],
    [ 21, 3, true ],
    [ 21, 4, true ],
    [ 21, 5, true ],
    [ 21, 6, true ],
    [ 21, 7, true ],
    [ 21, 8, true ],
    [ 21, 9, true ],
    [ 21, 10, true ],
]
let combineSplit=[
    [ [ 1, 1 ], 1 ],
    [ [ 1, 1 ], 2 ],
    [ [ 1, 1 ], 3 ],
    [ [ 1, 1 ], 4 ],
    [ [ 1, 1 ], 5 ],
    [ [ 1, 1 ], 6 ],
    [ [ 1, 1 ], 7 ],
    [ [ 1, 1 ], 8 ],
    [ [ 1, 1 ], 9 ],
    [ [ 1, 1 ], 10 ],
    [ [ 2, 2 ], 1 ],
    [ [ 2, 2 ], 2 ],
    [ [ 2, 2 ], 3 ],
    [ [ 2, 2 ], 4 ],
    [ [ 2, 2 ], 5 ],
    [ [ 2, 2 ], 6 ],
    [ [ 2, 2 ], 7 ],
    [ [ 2, 2 ], 8 ],
    [ [ 2, 2 ], 9 ],
    [ [ 2, 2 ], 10 ],
    [ [ 3, 3 ], 1 ],
    [ [ 3, 3 ], 2 ],
    [ [ 3, 3 ], 3 ],
    [ [ 3, 3 ], 4 ],
    [ [ 3, 3 ], 5 ],
    [ [ 3, 3 ], 6 ],
    [ [ 3, 3 ], 7 ],
    [ [ 3, 3 ], 8 ],
    [ [ 3, 3 ], 9 ],
    [ [ 3, 3 ], 10 ],
    [ [ 4, 4 ], 1 ],
    [ [ 4, 4 ], 2 ],
    [ [ 4, 4 ], 3 ],
    [ [ 4, 4 ], 4 ],
    [ [ 4, 4 ], 5 ],
    [ [ 4, 4 ], 6 ],
    [ [ 4, 4 ], 7 ],
    [ [ 4, 4 ], 8 ],
    [ [ 4, 4 ], 9 ],
    [ [ 4, 4 ], 10 ],
    [ [ 5, 5 ], 1 ],
    [ [ 5, 5 ], 2 ],
    [ [ 5, 5 ], 3 ],
    [ [ 5, 5 ], 4 ],
    [ [ 5, 5 ], 5 ],
    [ [ 5, 5 ], 6 ],
    [ [ 5, 5 ], 7 ],
    [ [ 5, 5 ], 8 ],
    [ [ 5, 5 ], 9 ],
    [ [ 5, 5 ], 10 ],
    [ [ 6, 6 ], 1 ],
    [ [ 6, 6 ], 2 ],
    [ [ 6, 6 ], 3 ],
    [ [ 6, 6 ], 4 ],
    [ [ 6, 6 ], 5 ],
    [ [ 6, 6 ], 6 ],
    [ [ 6, 6 ], 7 ],
    [ [ 6, 6 ], 8 ],
    [ [ 6, 6 ], 9 ],
    [ [ 6, 6 ], 10 ],
    [ [ 7, 7 ], 1 ],
    [ [ 7, 7 ], 2 ],
    [ [ 7, 7 ], 3 ],
    [ [ 7, 7 ], 4 ],
    [ [ 7, 7 ], 5 ],
    [ [ 7, 7 ], 6 ],
    [ [ 7, 7 ], 7 ],
    [ [ 7, 7 ], 8 ],
    [ [ 7, 7 ], 9 ],
    [ [ 7, 7 ], 10 ],
    [ [ 8, 8 ], 1 ],
    [ [ 8, 8 ], 2 ],
    [ [ 8, 8 ], 3 ],
    [ [ 8, 8 ], 4 ],
    [ [ 8, 8 ], 5 ],
    [ [ 8, 8 ], 6 ],
    [ [ 8, 8 ], 7 ],
    [ [ 8, 8 ], 8 ],
    [ [ 8, 8 ], 9 ],
    [ [ 8, 8 ], 10 ],
    [ [ 9, 9 ], 1 ],
    [ [ 9, 9 ], 2 ],
    [ [ 9, 9 ], 3 ],
    [ [ 9, 9 ], 4 ],
    [ [ 9, 9 ], 5 ],
    [ [ 9, 9 ], 6 ],
    [ [ 9, 9 ], 7 ],
    [ [ 9, 9 ], 8 ],
    [ [ 9, 9 ], 9 ],
    [ [ 9, 9 ], 10 ],
    [ [ 10, 10 ], 1 ],
    [ [ 10, 10 ], 2 ],
    [ [ 10, 10 ], 3 ],
    [ [ 10, 10 ], 4 ],
    [ [ 10, 10 ], 5 ],
    [ [ 10, 10 ], 6 ],
    [ [ 10, 10 ], 7 ],
    [ [ 10, 10 ], 8 ],
    [ [ 10, 10 ], 9 ],
    [ [ 10, 10 ], 10 ]
]

let twoCardsCombineH=makeTwoCardsCombine(combineH)
let twoCardsCombineSplit=combineSplit
let twoCardsCombineS=makeTwoCardsCombine(combineS)
let twoCardsCombineAll=[...twoCardsCombineH,...twoCardsCombineSplit,...twoCardsCombineS]

let threeCardsCombineH=makeThreeCardsCombine(combineH)
let threeCardsCombineS=makeThreeCardsCombine(combineS)

//one deck

// {
//     //one deck s17 Hard
//
//
//     {
//         let oneDeckS17HardTrusy=[
//
//             [ 12, 4, false ],
//             [ 12, 5, false ],
//             [ 12, 6, false ],
//
//             [ 13, 2, false ],
//             [ 13, 3, false ],
//             [ 13, 4, false ],
//             [ 13, 5, false ],
//             [ 13, 6, false ],
//
//             [ 14, 2, false ],
//             [ 14, 3, false ],
//             [ 14, 4, false ],
//             [ 14, 5, false ],
//             [ 14, 6, false ],
//
//             [ 15, 2, false ],
//             [ 15, 3, false ],
//             [ 15, 4, false ],
//             [ 15, 5, false ],
//             [ 15, 6, false ],
//
//             [ 16, 2, false ],
//             [ 16, 3, false ],
//             [ 16, 4, false ],
//             [ 16, 5, false ],
//             [ 16, 6, false ],
//
//             [ 17, 1, false ],
//             [ 17, 2, false ],
//             [ 17, 3, false ],
//             [ 17, 4, false ],
//             [ 17, 5, false ],
//             [ 17, 6, false ],
//             [ 17, 7, false ],
//             [ 17, 8, false ],
//             [ 17, 9, false ],
//             [ 17, 10, false ],
//             [ 18, 1, false ],
//             [ 18, 2, false ],
//             [ 18, 3, false ],
//             [ 18, 4, false ],
//             [ 18, 5, false ],
//             [ 18, 6, false ],
//             [ 18, 7, false ],
//             [ 18, 8, false ],
//             [ 18, 9, false ],
//             [ 18, 10, false ],
//             [ 19, 1, false ],
//             [ 19, 2, false ],
//             [ 19, 3, false ],
//             [ 19, 4, false ],
//             [ 19, 5, false ],
//             [ 19, 6, false ],
//             [ 19, 7, false ],
//             [ 19, 8, false ],
//             [ 19, 9, false ],
//             [ 19, 10, false ],
//             [ 20, 1, false ],
//             [ 20, 2, false ],
//             [ 20, 3, false ],
//             [ 20, 4, false ],
//             [ 20, 5, false ],
//             [ 20, 6, false ],
//             [ 20, 7, false ],
//             [ 20, 8, false ],
//             [ 20, 9, false ],
//             [ 20, 10, false ],
//             [ 21, 1, false ],
//             [ 21, 2, false ],
//             [ 21, 3, false ],
//             [ 21, 4, false ],
//             [ 21, 5, false ],
//             [ 21, 6, false ],
//             [ 21, 7, false ],
//             [ 21, 8, false ],
//             [ 21, 9, false ],
//             [ 21, 10, false ],
//         ]
//
//         let oneDeckS17HardTwoCardsTrusy=makeTwoCardsCombine(oneDeckS17HardTrusy)
//         let oneDeckS17HardTwoCardsFalsy=_.differenceWith(twoCardsCombineH,oneDeckS17HardTwoCardsTrusy,_.isEqual)
//         let oneDeckS17HardThreeCardsTrusy=makeThreeCardsCombine(oneDeckS17HardTrusy)
//         let oneDeckS17HardThreeCardsFalsy=_.differenceWith(threeCardsCombineH,oneDeckS17HardThreeCardsTrusy,_.isEqual)
//         function OneDeckS17Hard(playerCards,dealerCard){
//             let options=GameOptions({
//                 numberOfDecks:1,
//                 charlie:false,
//                 hitSoft17:false,
//
//             })
//
//             const handValue=Points(playerCards)
//             const handCount=1
//             return [playerCards,dealerCard,handValue,handCount,options]
//         }
//
//         describe('One Deck S17 Hard Two hands',function(){
//             describe('stand',function(){
//                 oneDeckS17HardTwoCardsTrusy.forEach(function(value){
//
//                     it(`${value} should return true`,function(){
//                         expect(Stand(...OneDeckS17Hard(...value))).to.be.ok
//                     })
//                 })
//             })
//             describe('Not stand',function(){
//                 oneDeckS17HardTwoCardsFalsy.forEach(function(value){
//                     it(`${value} should return false`,function(){
//                         expect(Stand(...OneDeckS17Hard(...value))).to.not.be.ok
//                     })
//                 })
//             })
//         })
//
//         describe('One Deck S17 Hard Three hands',function(){
//             describe('stand',function(){
//                 oneDeckS17HardThreeCardsTrusy.forEach(function(value){
//
//                     it(`${value} should return true`,function(){
//                         expect(Stand(...OneDeckS17Hard(...value))).to.be.ok
//                     })
//                 })
//             })
//             describe('Not stand',function(){
//                 oneDeckS17HardThreeCardsFalsy.forEach(function(value){
//                     it(`${value} should return false`,function(){
//                         expect(Stand(...OneDeckS17Hard(...value))).to.not.be.ok
//                     })
//                 })
//             })
//         })
//
//
//     }
//
// // one deck s17 soft
//
//     {
//         let oneDeckS17SoftTrusy=[
//
//             [ 18, 1, true ],
//             [ 18, 2, true ],
//             [ 18, 3, true ],
//             [ 18, 4, true ],
//             [ 18, 5, true ],
//             [ 18, 6, true ],
//             [ 18, 7, true ],
//             [ 18, 8, true ],
//
//             [ 19, 1, true ],
//             [ 19, 2, true ],
//             [ 19, 3, true ],
//             [ 19, 4, true ],
//             [ 19, 5, true ],
//             [ 19, 6, true ],
//             [ 19, 7, true ],
//             [ 19, 8, true ],
//             [ 19, 9, true ],
//             [ 19, 10, true ],
//             [ 20, 1, true ],
//             [ 20, 2, true ],
//             [ 20, 3, true ],
//             [ 20, 4, true ],
//             [ 20, 5, true ],
//             [ 20, 6, true ],
//             [ 20, 7, true ],
//             [ 20, 8, true ],
//             [ 20, 9, true ],
//             [ 20, 10, true ],
//             [ 21, 1, true ],
//             [ 21, 2, true ],
//             [ 21, 3, true ],
//             [ 21, 4, true ],
//             [ 21, 5, true ],
//             [ 21, 6, true ],
//             [ 21, 7, true ],
//             [ 21, 8, true ],
//             [ 21, 9, true ],
//             [ 21, 10, true ],
//
//         ]
//         let oneDeckS17SoftTwoCardsTrusy=makeTwoCardsCombine(oneDeckS17SoftTrusy)
//         let oneDeckS17SoftTwoCardsFalsy=_.differenceWith(twoCardsCombineS,oneDeckS17SoftTwoCardsTrusy,_.isEqual)
//         let oneDeckS17SoftThreeCardsTrusy=makeThreeCardsCombine(oneDeckS17SoftTrusy)
//         let oneDeckS17SoftThreeCardsFalsy=_.differenceWith(threeCardsCombineS,oneDeckS17SoftThreeCardsTrusy,_.isEqual)
//         function OneDeckS17Soft(playerCards,dealerCard){
//             let options=GameOptions({
//                 numberOfDecks:1,
//                 charlie:false,
//                 hitSoft17:false,
//
//             })
//
//             const handValue=Points(playerCards)
//             const handCount=1
//             return [playerCards,dealerCard,handValue,handCount,options]
//         }
//
//         describe('One Deck S17 Soft Two hands',function(){
//             describe('stand',function(){
//                 oneDeckS17SoftTwoCardsTrusy.forEach(function(value){
//
//                     it(`${value} should return true`,function(){
//                         expect(Stand(...OneDeckS17Soft(...value))).to.be.ok
//                     })
//                 })
//             })
//             describe('Not stand',function(){
//                 oneDeckS17SoftTwoCardsFalsy.forEach(function(value){
//                     it(`${value} should return false`,function(){
//                         expect(Stand(...OneDeckS17Soft(...value))).to.not.be.ok
//                     })
//                 })
//             })
//         })
//
//         describe('One Deck S17 Soft Three hands',function(){
//             describe('stand',function(){
//                 oneDeckS17SoftThreeCardsTrusy.forEach(function(value){
//
//                     it(`${value} should return true`,function(){
//                         expect(Stand(...OneDeckS17Soft(...value))).to.be.ok
//                     })
//                 })
//             })
//             describe('Not stand',function(){
//                 oneDeckS17SoftThreeCardsFalsy.forEach(function(value){
//                     it(`${value} should return false`,function(){
//                         expect(Stand(...OneDeckS17Soft(...value))).to.not.be.ok
//                     })
//                 })
//             })
//         })
//     }
//
// // one deck s17 split
//
//     {
//         let oneDeckS17SplitTrusy=[
//             [[7,7],10],
//             [[9,9],7],
//             [[9,9],10],
//             [[9,9],1],
//             [ [ 10, 10 ], 1 ],
//             [ [ 10, 10 ], 2 ],
//             [ [ 10, 10 ], 3 ],
//             [ [ 10, 10 ], 4 ],
//             [ [ 10, 10 ], 5 ],
//             [ [ 10, 10 ], 6 ],
//             [ [ 10, 10 ], 7 ],
//             [ [ 10, 10 ], 8 ],
//             [ [ 10, 10 ], 9 ],
//             [ [ 10, 10 ], 10 ]
//         ]
//         let oneDeckS17SplitFalsy=_.differenceWith(twoCardsCombineSplit,oneDeckS17SplitTrusy,_.isEqual)
//         function OneDeckS17Split(playerCards,dealerCard){
//             let options=GameOptions({
//                 numberOfDecks:1,
//                 charlie:false,
//                 hitSplit17:false,
//
//             })
//
//             const handValue=Points(playerCards)
//             const handCount=1
//             return [playerCards,dealerCard,handValue,handCount,options]
//         }
//
//         describe('One Deck S17 Split Two hands',function(){
//             describe('stand',function(){
//                 oneDeckS17SplitTrusy.forEach(function(value){
//
//                     it(`${value} should return true`,function(){
//                         expect(Stand(...OneDeckS17Split(...value))).to.be.ok
//                     })
//                 })
//             })
//             describe('Not stand',function(){
//                 oneDeckS17SplitFalsy.forEach(function(value){
//                     it(`${value} should return false`,function(){
//                         expect(Stand(...OneDeckS17Split(...value))).to.not.be.ok
//                     })
//                 })
//             })
//         })
//
//
//     }
//
//
// //one deck H17 Hard
//     {
//         let oneDeckH17HardTrusy=[
//             [ 12, 4, false ],
//             [ 12, 5, false ],
//             [ 12, 6, false ],
//
//             [ 13, 2, false ],
//             [ 13, 3, false ],
//             [ 13, 4, false ],
//             [ 13, 5, false ],
//             [ 13, 6, false ],
//
//             [ 14, 2, false ],
//             [ 14, 3, false ],
//             [ 14, 4, false ],
//             [ 14, 5, false ],
//             [ 14, 6, false ],
//
//             [ 15, 2, false ],
//             [ 15, 3, false ],
//             [ 15, 4, false ],
//             [ 15, 5, false ],
//             [ 15, 6, false ],
//
//             [ 16, 2, false ],
//             [ 16, 3, false ],
//             [ 16, 4, false ],
//             [ 16, 5, false ],
//             [ 16, 6, false ],
//
//             [ 17, 1, false ],
//             [ 17, 2, false ],
//             [ 17, 3, false ],
//             [ 17, 4, false ],
//             [ 17, 5, false ],
//             [ 17, 6, false ],
//             [ 17, 7, false ],
//             [ 17, 8, false ],
//             [ 17, 9, false ],
//             [ 17, 10, false ],
//             [ 18, 1, false ],
//             [ 18, 2, false ],
//             [ 18, 3, false ],
//             [ 18, 4, false ],
//             [ 18, 5, false ],
//             [ 18, 6, false ],
//             [ 18, 7, false ],
//             [ 18, 8, false ],
//             [ 18, 9, false ],
//             [ 18, 10, false ],
//             [ 19, 1, false ],
//             [ 19, 2, false ],
//             [ 19, 3, false ],
//             [ 19, 4, false ],
//             [ 19, 5, false ],
//             [ 19, 6, false ],
//             [ 19, 7, false ],
//             [ 19, 8, false ],
//             [ 19, 9, false ],
//             [ 19, 10, false ],
//             [ 20, 1, false ],
//             [ 20, 2, false ],
//             [ 20, 3, false ],
//             [ 20, 4, false ],
//             [ 20, 5, false ],
//             [ 20, 6, false ],
//             [ 20, 7, false ],
//             [ 20, 8, false ],
//             [ 20, 9, false ],
//             [ 20, 10, false ],
//             [ 21, 1, false ],
//             [ 21, 2, false ],
//             [ 21, 3, false ],
//             [ 21, 4, false ],
//             [ 21, 5, false ],
//             [ 21, 6, false ],
//             [ 21, 7, false ],
//             [ 21, 8, false ],
//             [ 21, 9, false ],
//             [ 21, 10, false ],
//         ]
//         let oneDeckH17HardTwoCardsTrusy=makeTwoCardsCombine(oneDeckH17HardTrusy)
//         let oneDeckH17HardTwoCardsFalsy=_.differenceWith(twoCardsCombineH,oneDeckH17HardTwoCardsTrusy,_.isEqual)
//         let oneDeckH17HardThreeCardsTrusy=makeThreeCardsCombine(oneDeckH17HardTrusy)
//         let oneDeckH17HardThreeCardsFalsy=_.differenceWith(threeCardsCombineH,oneDeckH17HardThreeCardsTrusy,_.isEqual)
//         function OneDeckH17Hard(playerCards,dealerCard){
//             let options=GameOptions({
//                 numberOfDecks:1,
//                 charlie:false,
//                 hitSoft17:true,
//
//             })
//
//             const handValue=Points(playerCards)
//             const handCount=1
//             return [playerCards,dealerCard,handValue,handCount,options]
//         }
//
//         describe('One Deck H17 Hard Two hands',function(){
//             describe('stand',function(){
//                 oneDeckH17HardTwoCardsTrusy.forEach(function(value){
//
//                     it(`${value} should return true`,function(){
//                         expect(Stand(...OneDeckH17Hard(...value))).to.be.ok
//                     })
//                 })
//             })
//             describe('Not stand',function(){
//                 oneDeckH17HardTwoCardsFalsy.forEach(function(value){
//                     it(`${value} should return false`,function(){
//                         expect(Stand(...OneDeckH17Hard(...value))).to.not.be.ok
//                     })
//                 })
//             })
//         })
//
//         describe('One Deck H17 Hard Three hands',function(){
//             describe('stand',function(){
//                 oneDeckH17HardThreeCardsTrusy.forEach(function(value){
//
//                     it(`${value} should return true`,function(){
//                         expect(Stand(...OneDeckH17Hard(...value))).to.be.ok
//                     })
//                 })
//             })
//             describe('Not stand',function(){
//                 oneDeckH17HardThreeCardsFalsy.forEach(function(value){
//                     it(`${value} should return false`,function(){
//                         expect(Stand(...OneDeckH17Hard(...value))).to.not.be.ok
//                     })
//                 })
//             })
//         })
//     }
//
// //one deck H17 Soft
//
//     {
//         let oneDeckH17SoftTrusy=[
//
//             [ 18, 2, true ],
//             [ 18, 3, true ],
//             [ 18, 4, true ],
//             [ 18, 5, true ],
//             [ 18, 6, true ],
//             [ 18, 7, true ],
//             [ 18, 8, true ],
//
//             [ 19, 1, true ],
//             [ 19, 2, true ],
//             [ 19, 3, true ],
//             [ 19, 4, true ],
//             [ 19, 5, true ],
//             [ 19, 6, true ],
//             [ 19, 7, true ],
//             [ 19, 8, true ],
//             [ 19, 9, true ],
//             [ 19, 10, true ],
//             [ 20, 1, true ],
//             [ 20, 2, true ],
//             [ 20, 3, true ],
//             [ 20, 4, true ],
//             [ 20, 5, true ],
//             [ 20, 6, true ],
//             [ 20, 7, true ],
//             [ 20, 8, true ],
//             [ 20, 9, true ],
//             [ 20, 10, true ],
//             [ 21, 1, true ],
//             [ 21, 2, true ],
//             [ 21, 3, true ],
//             [ 21, 4, true ],
//             [ 21, 5, true ],
//             [ 21, 6, true ],
//             [ 21, 7, true ],
//             [ 21, 8, true ],
//             [ 21, 9, true ],
//             [ 21, 10, true ],
//         ]
//         let oneDeckH17SoftTwoCardsTrusy=makeTwoCardsCombine(oneDeckH17SoftTrusy)
//         let oneDeckH17SoftTwoCardsFalsy=_.differenceWith(twoCardsCombineS,oneDeckH17SoftTwoCardsTrusy,_.isEqual)
//         let oneDeckH17SoftThreeCardsTrusy=makeThreeCardsCombine(oneDeckH17SoftTrusy)
//         let oneDeckH17SoftThreeCardsFalsy=_.differenceWith(threeCardsCombineS,oneDeckH17SoftThreeCardsTrusy,_.isEqual)
//         function OneDeckH17Soft(playerCards,dealerCard){
//             let options=GameOptions({
//                 numberOfDecks:1,
//                 charlie:false,
//                 hitSoft17:true,
//
//             })
//
//             const handValue=Points(playerCards)
//             const handCount=1
//             return [playerCards,dealerCard,handValue,handCount,options]
//         }
//
//         describe('One Deck H17 Soft Two hands',function(){
//             describe('stand',function(){
//                 oneDeckH17SoftTwoCardsTrusy.forEach(function(value){
//
//                     it(`${value} should return true`,function(){
//                         expect(Stand(...OneDeckH17Soft(...value))).to.be.ok
//                     })
//                 })
//             })
//             describe('Not stand',function(){
//                 oneDeckH17SoftTwoCardsFalsy.forEach(function(value){
//                     it(`${value} should return false`,function(){
//                         expect(Stand(...OneDeckH17Soft(...value))).to.not.be.ok
//                     })
//                 })
//             })
//         })
//
//         describe('One Deck H17 Soft Three hands',function(){
//             describe('stand',function(){
//                 oneDeckH17SoftThreeCardsTrusy.forEach(function(value){
//
//                     it(`${value} should return true`,function(){
//                         expect(Stand(...OneDeckH17Soft(...value))).to.be.ok
//                     })
//                 })
//             })
//             describe('Not stand',function(){
//                 oneDeckH17SoftThreeCardsFalsy.forEach(function(value){
//                     it(`${value} should return false`,function(){
//                         expect(Stand(...OneDeckH17Soft(...value))).to.not.be.ok
//                     })
//                 })
//             })
//         })
//
//     }
//
// //one deck H17 split
//
//     {
//         let oneDeckH17SplitTrusy=[
//             [[7,7],10],
//             [[9,9],7],
//             [[9,9],10],
//             [[9,9],1],
//             [ [ 10, 10 ], 1 ],
//             [ [ 10, 10 ], 2 ],
//             [ [ 10, 10 ], 3 ],
//             [ [ 10, 10 ], 4 ],
//             [ [ 10, 10 ], 5 ],
//             [ [ 10, 10 ], 6 ],
//             [ [ 10, 10 ], 7 ],
//             [ [ 10, 10 ], 8 ],
//             [ [ 10, 10 ], 9 ],
//             [ [ 10, 10 ], 10 ]
//
//         ]
//         let oneDeckH17SplitFalsy=_.differenceWith(twoCardsCombineSplit,oneDeckH17SplitTrusy,_.isEqual)
//         function OneDeckH17Split(playerCards,dealerCard){
//             let options=GameOptions({
//                 numberOfDecks:1,
//                 charlie:false,
//                 hitSplit17:false,
//
//             })
//
//             const handValue=Points(playerCards)
//             const handCount=1
//             return [playerCards,dealerCard,handValue,handCount,options]
//         }
//
//         describe('One Deck H17 Split Two hands',function(){
//             describe('stand',function(){
//                 oneDeckH17SplitTrusy.forEach(function(value){
//
//                     it(`${value} should return true`,function(){
//                         expect(Stand(...OneDeckH17Split(...value))).to.be.ok
//                     })
//                 })
//             })
//             describe('Not stand',function(){
//                 oneDeckH17SplitFalsy.forEach(function(value){
//                     it(`${value} should return false`,function(){
//                         expect(Stand(...OneDeckH17Split(...value))).to.not.be.ok
//                     })
//                 })
//             })
//         })
//
//
//     }
// }

// two decks

// {
//     // two decks S17 Hard
//
//     {
//         let twoDeckS17HardTrusy=[
//
//
//             [ 12, 4, false ],
//             [ 12, 5, false ],
//             [ 12, 6, false ],
//
//             [ 13, 2, false ],
//             [ 13, 3, false ],
//             [ 13, 4, false ],
//             [ 13, 5, false ],
//             [ 13, 6, false ],
//
//             [ 14, 2, false ],
//             [ 14, 3, false ],
//             [ 14, 4, false ],
//             [ 14, 5, false ],
//             [ 14, 6, false ],
//
//             [ 15, 2, false ],
//             [ 15, 3, false ],
//             [ 15, 4, false ],
//             [ 15, 5, false ],
//             [ 15, 6, false ],
//
//             [ 16, 2, false ],
//             [ 16, 3, false ],
//             [ 16, 4, false ],
//             [ 16, 5, false ],
//             [ 16, 6, false ],
//
//             [ 17, 1, false ],
//             [ 17, 2, false ],
//             [ 17, 3, false ],
//             [ 17, 4, false ],
//             [ 17, 5, false ],
//             [ 17, 6, false ],
//             [ 17, 7, false ],
//             [ 17, 8, false ],
//             [ 17, 9, false ],
//             [ 17, 10, false ],
//             [ 18, 1, false ],
//             [ 18, 2, false ],
//             [ 18, 3, false ],
//             [ 18, 4, false ],
//             [ 18, 5, false ],
//             [ 18, 6, false ],
//             [ 18, 7, false ],
//             [ 18, 8, false ],
//             [ 18, 9, false ],
//             [ 18, 10, false ],
//             [ 19, 1, false ],
//             [ 19, 2, false ],
//             [ 19, 3, false ],
//             [ 19, 4, false ],
//             [ 19, 5, false ],
//             [ 19, 6, false ],
//             [ 19, 7, false ],
//             [ 19, 8, false ],
//             [ 19, 9, false ],
//             [ 19, 10, false ],
//             [ 20, 1, false ],
//             [ 20, 2, false ],
//             [ 20, 3, false ],
//             [ 20, 4, false ],
//             [ 20, 5, false ],
//             [ 20, 6, false ],
//             [ 20, 7, false ],
//             [ 20, 8, false ],
//             [ 20, 9, false ],
//             [ 20, 10, false ],
//             [ 21, 1, false ],
//             [ 21, 2, false ],
//             [ 21, 3, false ],
//             [ 21, 4, false ],
//             [ 21, 5, false ],
//             [ 21, 6, false ],
//             [ 21, 7, false ],
//             [ 21, 8, false ],
//             [ 21, 9, false ],
//             [ 21, 10, false ],
//         ]
//         let twoDeckS17HardTwoCardsTrusy=makeTwoCardsCombine(twoDeckS17HardTrusy)
//         let twoDeckS17HardTwoCardsFalsy=_.differenceWith(twoCardsCombineH,twoDeckS17HardTwoCardsTrusy,_.isEqual)
//         let twoDeckS17HardThreeCardsTrusy=makeThreeCardsCombine(twoDeckS17HardTrusy)
//         let twoDeckS17HardThreeCardsFalsy=_.differenceWith(threeCardsCombineH,twoDeckS17HardThreeCardsTrusy,_.isEqual)
//         function TwoDeckS17Hard(playerCards,dealerCard){
//             let options=GameOptions({
//                 numberOfDecks:2,
//                 charlie:false,
//                 hitSoft17:false,
//
//             })
//
//             const handValue=Points(playerCards)
//             const handCount=1
//             return [playerCards,dealerCard,handValue,handCount,options]
//         }
//
//         describe('Two Deck S17 Hard Two hands',function(){
//             describe('stand',function(){
//                 twoDeckS17HardTwoCardsTrusy.forEach(function(value){
//
//                     it(`${value} should return true`,function(){
//                         expect(Stand(...TwoDeckS17Hard(...value))).to.be.ok
//                     })
//                 })
//             })
//             describe('Not stand',function(){
//                 twoDeckS17HardTwoCardsFalsy.forEach(function(value){
//                     it(`${value} should return false`,function(){
//                         expect(Stand(...TwoDeckS17Hard(...value))).to.not.be.ok
//                     })
//                 })
//             })
//         })
//
//         describe('Two Deck S17 Hard Three hands',function(){
//             describe('stand',function(){
//                 twoDeckS17HardThreeCardsTrusy.forEach(function(value){
//
//                     it(`${value} should return true`,function(){
//                         expect(Stand(...TwoDeckS17Hard(...value))).to.be.ok
//                     })
//                 })
//             })
//             describe('Not stand',function(){
//                 twoDeckS17HardThreeCardsFalsy.forEach(function(value){
//                     it(`${value} should return false`,function(){
//                         expect(Stand(...TwoDeckS17Hard(...value))).to.not.be.ok
//                     })
//                 })
//             })
//         })
//
//
//     }
//
// // two decks S17 Soft
//
//     {
//         let twoDeckS17SoftTrusy=[
//
//
//             [ 18, 2, true ],
//             [ 18, 3, true ],
//             [ 18, 4, true ],
//             [ 18, 5, true ],
//             [ 18, 6, true ],
//             [ 18, 7, true ],
//             [ 18, 8, true ],
//
//             [ 19, 1, true ],
//             [ 19, 2, true ],
//             [ 19, 3, true ],
//             [ 19, 4, true ],
//             [ 19, 5, true ],
//             [ 19, 6, true ],
//             [ 19, 7, true ],
//             [ 19, 8, true ],
//             [ 19, 9, true ],
//             [ 19, 10, true ],
//             [ 20, 1, true ],
//             [ 20, 2, true ],
//             [ 20, 3, true ],
//             [ 20, 4, true ],
//             [ 20, 5, true ],
//             [ 20, 6, true ],
//             [ 20, 7, true ],
//             [ 20, 8, true ],
//             [ 20, 9, true ],
//             [ 20, 10, true ],
//             [ 21, 1, true ],
//             [ 21, 2, true ],
//             [ 21, 3, true ],
//             [ 21, 4, true ],
//             [ 21, 5, true ],
//             [ 21, 6, true ],
//             [ 21, 7, true ],
//             [ 21, 8, true ],
//             [ 21, 9, true ],
//             [ 21, 10, true ],
//         ]
//         let twoDeckS17SoftTwoCardsTrusy=makeTwoCardsCombine(twoDeckS17SoftTrusy)
//         let twoDeckS17SoftTwoCardsFalsy=_.differenceWith(twoCardsCombineS,twoDeckS17SoftTwoCardsTrusy,_.isEqual)
//         let twoDeckS17SoftThreeCardsTrusy=makeThreeCardsCombine(twoDeckS17SoftTrusy)
//         let twoDeckS17SoftThreeCardsFalsy=_.differenceWith(threeCardsCombineS,twoDeckS17SoftThreeCardsTrusy,_.isEqual)
//         function TwoDeckS17Soft(playerCards,dealerCard){
//             let options=GameOptions({
//                 numberOfDecks:2,
//                 charlie:false,
//                 hitSoft17:false,
//
//             })
//
//             const handValue=Points(playerCards)
//             const handCount=1
//             return [playerCards,dealerCard,handValue,handCount,options]
//         }
//
//         describe('Two Deck S17 Soft Two hands',function(){
//             describe('stand',function(){
//                 twoDeckS17SoftTwoCardsTrusy.forEach(function(value){
//
//                     it(`${value} should return true`,function(){
//                         expect(Stand(...TwoDeckS17Soft(...value))).to.be.ok
//                     })
//                 })
//             })
//             describe('Not stand',function(){
//                 twoDeckS17SoftTwoCardsFalsy.forEach(function(value){
//                     it(`${value} should return false`,function(){
//                         expect(Stand(...TwoDeckS17Soft(...value))).to.not.be.ok
//                     })
//                 })
//             })
//         })
//
//         describe('Two Deck S17 Soft Three hands',function(){
//             describe('stand',function(){
//                 twoDeckS17SoftThreeCardsTrusy.forEach(function(value){
//
//                     it(`${value} should return true`,function(){
//                         expect(Stand(...TwoDeckS17Soft(...value))).to.be.ok
//                     })
//                 })
//             })
//             describe('Not stand',function(){
//                 twoDeckS17SoftThreeCardsFalsy.forEach(function(value){
//                     it(`${value} should return false`,function(){
//                         expect(Stand(...TwoDeckS17Soft(...value))).to.not.be.ok
//                     })
//                 })
//             })
//         })
//
//     }
//
// // two decks S17 Split
//
//     {
//         let twoDeckSplitsS17Trusy=[
//
//             [[9,9],7],
//             [[9,9],10],
//             [[9,9],1],
//             [ [ 10, 10 ], 1 ],
//             [ [ 10, 10 ], 2 ],
//             [ [ 10, 10 ], 3 ],
//             [ [ 10, 10 ], 4 ],
//             [ [ 10, 10 ], 5 ],
//             [ [ 10, 10 ], 6 ],
//             [ [ 10, 10 ], 7 ],
//             [ [ 10, 10 ], 8 ],
//             [ [ 10, 10 ], 9 ],
//             [ [ 10, 10 ], 10 ]
//
//         ]
//
//         let twoDecksSplitS17Falsy=_.differenceWith(twoCardsCombineSplit,twoDeckSplitsS17Trusy,_.isEqual)
//         function TwoDeckS17Split(playerCards,dealerCard){
//             let options=GameOptions({
//                 numberOfDecks:2,
//                 charlie:false,
//                 hitSplit17:true,
//                 doubleAfterSplit:false
//
//             })
//
//             const handValue=Points(playerCards)
//             const handCount=1
//             return [playerCards,dealerCard,handValue,handCount,options]
//         }
//
//         describe('Two Deck S17 Split Two hands',function(){
//             describe('stand',function(){
//                 twoDeckSplitsS17Trusy.forEach(function(value){
//
//                     it(`${value} should return true`,function(){
//                         expect(Stand(...TwoDeckS17Split(...value))).to.be.ok
//                     })
//                 })
//             })
//             describe('Not stand',function(){
//                 twoDecksSplitS17Falsy.forEach(function(value){
//                     it(`${value} should return false`,function(){
//                         expect(Stand(...TwoDeckS17Split(...value))).to.not.be.ok
//                     })
//                 })
//             })
//         })
//
//
//
//
//
//     }
//
// // two decks H17 Hard
//
//     {
//         let twoDeckH17HardTrusy=[
//
//
//             [ 12, 4, false ],
//             [ 12, 5, false ],
//             [ 12, 6, false ],
//
//             [ 13, 2, false ],
//             [ 13, 3, false ],
//             [ 13, 4, false ],
//             [ 13, 5, false ],
//             [ 13, 6, false ],
//
//             [ 14, 2, false ],
//             [ 14, 3, false ],
//             [ 14, 4, false ],
//             [ 14, 5, false ],
//             [ 14, 6, false ],
//
//             [ 15, 2, false ],
//             [ 15, 3, false ],
//             [ 15, 4, false ],
//             [ 15, 5, false ],
//             [ 15, 6, false ],
//
//             [ 16, 2, false ],
//             [ 16, 3, false ],
//             [ 16, 4, false ],
//             [ 16, 5, false ],
//             [ 16, 6, false ],
//
//             [ 17, 1, false ],
//             [ 17, 2, false ],
//             [ 17, 3, false ],
//             [ 17, 4, false ],
//             [ 17, 5, false ],
//             [ 17, 6, false ],
//             [ 17, 7, false ],
//             [ 17, 8, false ],
//             [ 17, 9, false ],
//             [ 17, 10, false ],
//             [ 18, 1, false ],
//             [ 18, 2, false ],
//             [ 18, 3, false ],
//             [ 18, 4, false ],
//             [ 18, 5, false ],
//             [ 18, 6, false ],
//             [ 18, 7, false ],
//             [ 18, 8, false ],
//             [ 18, 9, false ],
//             [ 18, 10, false ],
//             [ 19, 1, false ],
//             [ 19, 2, false ],
//             [ 19, 3, false ],
//             [ 19, 4, false ],
//             [ 19, 5, false ],
//             [ 19, 6, false ],
//             [ 19, 7, false ],
//             [ 19, 8, false ],
//             [ 19, 9, false ],
//             [ 19, 10, false ],
//             [ 20, 1, false ],
//             [ 20, 2, false ],
//             [ 20, 3, false ],
//             [ 20, 4, false ],
//             [ 20, 5, false ],
//             [ 20, 6, false ],
//             [ 20, 7, false ],
//             [ 20, 8, false ],
//             [ 20, 9, false ],
//             [ 20, 10, false ],
//             [ 21, 1, false ],
//             [ 21, 2, false ],
//             [ 21, 3, false ],
//             [ 21, 4, false ],
//             [ 21, 5, false ],
//             [ 21, 6, false ],
//             [ 21, 7, false ],
//             [ 21, 8, false ],
//             [ 21, 9, false ],
//             [ 21, 10, false ],
//         ]
//         let twoDeckH17HardTwoCardsTrusy=makeTwoCardsCombine(twoDeckH17HardTrusy)
//         let twoDeckH17HardTwoCardsFalsy=_.differenceWith(twoCardsCombineH,twoDeckH17HardTwoCardsTrusy,_.isEqual)
//         let twoDeckH17HardThreeCardsTrusy=makeThreeCardsCombine(twoDeckH17HardTrusy)
//         let twoDeckH17HardThreeCardsFalsy=_.differenceWith(threeCardsCombineH,twoDeckH17HardThreeCardsTrusy,_.isEqual)
//         function TwoDeckH17Hard(playerCards,dealerCard){
//             let options=GameOptions({
//                 numberOfDecks:2,
//                 charlie:false,
//                 hitSoft17:true,
//
//             })
//
//             const handValue=Points(playerCards)
//             const handCount=1
//             return [playerCards,dealerCard,handValue,handCount,options]
//         }
//
//         describe('Two Deck H17 Hard Two hands',function(){
//             describe('stand',function(){
//                 twoDeckH17HardTwoCardsTrusy.forEach(function(value){
//
//                     it(`${value} should return true`,function(){
//                         expect(Stand(...TwoDeckH17Hard(...value))).to.be.ok
//                     })
//                 })
//             })
//             describe('Not stand',function(){
//                 twoDeckH17HardTwoCardsFalsy.forEach(function(value){
//                     it(`${value} should return false`,function(){
//                         expect(Stand(...TwoDeckH17Hard(...value))).to.not.be.ok
//                     })
//                 })
//             })
//         })
//
//         describe('Two Deck H17 Hard Three hands',function(){
//             describe('stand',function(){
//                 twoDeckH17HardThreeCardsTrusy.forEach(function(value){
//
//                     it(`${value} should return true`,function(){
//                         expect(Stand(...TwoDeckH17Hard(...value))).to.be.ok
//                     })
//                 })
//             })
//             describe('Not stand',function(){
//                 twoDeckH17HardThreeCardsFalsy.forEach(function(value){
//                     it(`${value} should return false`,function(){
//                         expect(Stand(...TwoDeckH17Hard(...value))).to.not.be.ok
//                     })
//                 })
//             })
//         })
//     }
//
// // two decks H17 Soft
//
//     {
//         let twoDeckH17SoftTrusy=[
//
//
//             [ 18, 2, true ],
//             [ 18, 3, true ],
//             [ 18, 4, true ],
//             [ 18, 5, true ],
//             [ 18, 6, true ],
//             [ 18, 7, true ],
//             [ 18, 8, true ],
//
//             [ 19, 1, true ],
//             [ 19, 2, true ],
//             [ 19, 3, true ],
//             [ 19, 4, true ],
//             [ 19, 5, true ],
//             [ 19, 6, true ],
//             [ 19, 7, true ],
//             [ 19, 8, true ],
//             [ 19, 9, true ],
//             [ 19, 10, true ],
//             [ 20, 1, true ],
//             [ 20, 2, true ],
//             [ 20, 3, true ],
//             [ 20, 4, true ],
//             [ 20, 5, true ],
//             [ 20, 6, true ],
//             [ 20, 7, true ],
//             [ 20, 8, true ],
//             [ 20, 9, true ],
//             [ 20, 10, true ],
//             [ 21, 1, true ],
//             [ 21, 2, true ],
//             [ 21, 3, true ],
//             [ 21, 4, true ],
//             [ 21, 5, true ],
//             [ 21, 6, true ],
//             [ 21, 7, true ],
//             [ 21, 8, true ],
//             [ 21, 9, true ],
//             [ 21, 10, true ],
//         ]
//         let twoDeckH17SoftTwoCardsTrusy=makeTwoCardsCombine(twoDeckH17SoftTrusy)
//         let twoDeckH17SoftTwoCardsFalsy=_.differenceWith(twoCardsCombineS,twoDeckH17SoftTwoCardsTrusy,_.isEqual)
//         let twoDeckH17SoftThreeCardsTrusy=makeThreeCardsCombine(twoDeckH17SoftTrusy)
//         let twoDeckH17SoftThreeCardsFalsy=_.differenceWith(threeCardsCombineS,twoDeckH17SoftThreeCardsTrusy,_.isEqual)
//         function TwoDeckH17Soft(playerCards,dealerCard){
//             let options=GameOptions({
//                 numberOfDecks:2,
//                 charlie:false,
//                 hitSoft17:true,
//
//             })
//
//             const handValue=Points(playerCards)
//             const handCount=1
//             return [playerCards,dealerCard,handValue,handCount,options]
//         }
//
//         describe('Two Deck H17 Soft Two hands',function(){
//             describe('stand',function(){
//                 twoDeckH17SoftTwoCardsTrusy.forEach(function(value){
//
//                     it(`${value} should return true`,function(){
//                         expect(Stand(...TwoDeckH17Soft(...value))).to.be.ok
//                     })
//                 })
//             })
//             describe('Not stand',function(){
//                 twoDeckH17SoftTwoCardsFalsy.forEach(function(value){
//                     it(`${value} should return false`,function(){
//                         expect(Stand(...TwoDeckH17Soft(...value))).to.not.be.ok
//                     })
//                 })
//             })
//         })
//
//         describe('Two Deck H17 Soft Three hands',function(){
//             describe('stand',function(){
//                 twoDeckH17SoftThreeCardsTrusy.forEach(function(value){
//
//                     it(`${value} should return true`,function(){
//                         expect(Stand(...TwoDeckH17Soft(...value))).to.be.ok
//                     })
//                 })
//             })
//             describe('Not stand',function(){
//                 twoDeckH17SoftThreeCardsFalsy.forEach(function(value){
//                     it(`${value} should return false`,function(){
//                         expect(Stand(...TwoDeckH17Soft(...value))).to.not.be.ok
//                     })
//                 })
//             })
//         })
//
//     }
//
// // two decks split H17
//
//     {
//         let twoDeckSplitsH17Trusy=[
//
//             [[9,9],7],
//             [[9,9],10],
//             [[9,9],1],
//             [ [ 10, 10 ], 1 ],
//             [ [ 10, 10 ], 2 ],
//             [ [ 10, 10 ], 3 ],
//             [ [ 10, 10 ], 4 ],
//             [ [ 10, 10 ], 5 ],
//             [ [ 10, 10 ], 6 ],
//             [ [ 10, 10 ], 7 ],
//             [ [ 10, 10 ], 8 ],
//             [ [ 10, 10 ], 9 ],
//             [ [ 10, 10 ], 10 ]
//
//         ]
//
//         let twoDecksSplitH17Falsy=_.differenceWith(twoCardsCombineSplit,twoDeckSplitsH17Trusy,_.isEqual)
//         function TwoDeckH17Split(playerCards,dealerCard){
//             let options=GameOptions({
//                 numberOfDecks:2,
//                 charlie:false,
//                 hitSplit17:true,
//                 doubleAfterSplit:true
//
//             })
//
//             const handValue=Points(playerCards)
//             const handCount=1
//             return [playerCards,dealerCard,handValue,handCount,options]
//         }
//
//         describe('Two Deck H17 Split Two hands',function(){
//             describe('stand',function(){
//                 twoDeckSplitsH17Trusy.forEach(function(value){
//
//                     it(`${value} should return true`,function(){
//                         expect(Stand(...TwoDeckH17Split(...value))).to.be.ok
//                     })
//                 })
//             })
//             describe('Not stand',function(){
//                 twoDecksSplitH17Falsy.forEach(function(value){
//                     it(`${value} should return false`,function(){
//                         expect(Stand(...TwoDeckH17Split(...value))).to.not.be.ok
//                     })
//                 })
//             })
//         })
//
//
//
//
//
//     }
// }


// four decks

// {
//     //s17 Hard
//
//     {
//         let fourDecksS17HardTrusy=[
//
//             [ 12, 4, false ],
//             [ 12, 5, false ],
//             [ 12, 6, false ],
//
//             [ 13, 2, false ],
//             [ 13, 3, false ],
//             [ 13, 4, false ],
//             [ 13, 5, false ],
//             [ 13, 6, false ],
//
//             [ 14, 2, false ],
//             [ 14, 3, false ],
//             [ 14, 4, false ],
//             [ 14, 5, false ],
//             [ 14, 6, false ],
//
//             [ 15, 2, false ],
//             [ 15, 3, false ],
//             [ 15, 4, false ],
//             [ 15, 5, false ],
//             [ 15, 6, false ],
//
//             [ 16, 2, false ],
//             [ 16, 3, false ],
//             [ 16, 4, false ],
//             [ 16, 5, false ],
//             [ 16, 6, false ],
//
//             [ 17, 1, false ],
//             [ 17, 2, false ],
//             [ 17, 3, false ],
//             [ 17, 4, false ],
//             [ 17, 5, false ],
//             [ 17, 6, false ],
//             [ 17, 7, false ],
//             [ 17, 8, false ],
//             [ 17, 9, false ],
//             [ 17, 10, false ],
//             [ 18, 1, false ],
//             [ 18, 2, false ],
//             [ 18, 3, false ],
//             [ 18, 4, false ],
//             [ 18, 5, false ],
//             [ 18, 6, false ],
//             [ 18, 7, false ],
//             [ 18, 8, false ],
//             [ 18, 9, false ],
//             [ 18, 10, false ],
//             [ 19, 1, false ],
//             [ 19, 2, false ],
//             [ 19, 3, false ],
//             [ 19, 4, false ],
//             [ 19, 5, false ],
//             [ 19, 6, false ],
//             [ 19, 7, false ],
//             [ 19, 8, false ],
//             [ 19, 9, false ],
//             [ 19, 10, false ],
//             [ 20, 1, false ],
//             [ 20, 2, false ],
//             [ 20, 3, false ],
//             [ 20, 4, false ],
//             [ 20, 5, false ],
//             [ 20, 6, false ],
//             [ 20, 7, false ],
//             [ 20, 8, false ],
//             [ 20, 9, false ],
//             [ 20, 10, false ],
//             [ 21, 1, false ],
//             [ 21, 2, false ],
//             [ 21, 3, false ],
//             [ 21, 4, false ],
//             [ 21, 5, false ],
//             [ 21, 6, false ],
//             [ 21, 7, false ],
//             [ 21, 8, false ],
//             [ 21, 9, false ],
//             [ 21, 10, false ],
//         ]
//         let fourDecksS17TwoCardsHardTrusy=makeTwoCardsCombine(fourDecksS17HardTrusy)
//         let fourDecksS17TwoCardsHardFalsy=_.differenceWith(twoCardsCombineH,fourDecksS17TwoCardsHardTrusy,_.isEqual)
//         let fourDecksS17ThreeCardsHardTrusy=makeThreeCardsCombine(fourDecksS17HardTrusy)
//         let fourDecksS17ThreeCardsHardFalsy=_.differenceWith(threeCardsCombineH,fourDecksS17ThreeCardsHardTrusy,_.isEqual)
//         function FourDeckS17Hard(playerCards,dealerCard){
//             let options=GameOptions({
//                 numberOfDecks:8,
//                 charlie:false,
//                 hitSoft17:false,
//
//             })
//
//             const handValue=Points(playerCards)
//             const handCount=1
//             return [playerCards,dealerCard,handValue,handCount,options]
//         }
//
//         describe('Two Deck S17 Hard Two hands',function(){
//             describe('stand',function(){
//                 fourDecksS17TwoCardsHardTrusy.forEach(function(value){
//
//                     it(`${value} should return true`,function(){
//                         expect(Stand(...FourDeckS17Hard(...value))).to.be.ok
//                     })
//                 })
//             })
//             describe('Not stand',function(){
//                 fourDecksS17TwoCardsHardFalsy.forEach(function(value){
//                     it(`${value} should return false`,function(){
//                         expect(Stand(...FourDeckS17Hard(...value))).to.not.be.ok
//                     })
//                 })
//             })
//         })
//
//         describe('Two Deck S17 Hard Three hands',function(){
//             describe('stand',function(){
//                 fourDecksS17ThreeCardsHardTrusy.forEach(function(value){
//
//                     it(`${value} should return true`,function(){
//                         expect(Stand(...FourDeckS17Hard(...value))).to.be.ok
//                     })
//                 })
//             })
//             describe('Not stand',function(){
//                 fourDecksS17ThreeCardsHardFalsy.forEach(function(value){
//                     it(`${value} should return false`,function(){
//                         expect(Stand(...FourDeckS17Hard(...value))).to.not.be.ok
//                     })
//                 })
//             })
//         })
//     }
//
//     //s17 soft
//     {
//         let fourDecksS17SoftTrusy=[
//
//             [ 18, 2, true ],
//             [ 18, 3, true ],
//             [ 18, 4, true ],
//             [ 18, 5, true ],
//             [ 18, 6, true ],
//             [ 18, 7, true ],
//             [ 18, 8, true ],
//
//             [ 19, 1, true ],
//             [ 19, 2, true ],
//             [ 19, 3, true ],
//             [ 19, 4, true ],
//             [ 19, 5, true ],
//             [ 19, 6, true ],
//             [ 19, 7, true ],
//             [ 19, 8, true ],
//             [ 19, 9, true ],
//             [ 19, 10, true ],
//             [ 20, 1, true ],
//             [ 20, 2, true ],
//             [ 20, 3, true ],
//             [ 20, 4, true ],
//             [ 20, 5, true ],
//             [ 20, 6, true ],
//             [ 20, 7, true ],
//             [ 20, 8, true ],
//             [ 20, 9, true ],
//             [ 20, 10, true ],
//             [ 21, 1, true ],
//             [ 21, 2, true ],
//             [ 21, 3, true ],
//             [ 21, 4, true ],
//             [ 21, 5, true ],
//             [ 21, 6, true ],
//             [ 21, 7, true ],
//             [ 21, 8, true ],
//             [ 21, 9, true ],
//             [ 21, 10, true ],
//
//         ]
//
//         let fourDecksS17TwoCardsHardTrusy=makeTwoCardsCombine(fourDecksS17SoftTrusy)
//         let fourDecksS17TwoCardsHardFalsy=_.differenceWith(twoCardsCombineS,fourDecksS17TwoCardsHardTrusy,_.isEqual)
//         let fourDecksS17ThreeCardsHardTrusy=makeThreeCardsCombine(fourDecksS17SoftTrusy)
//         let fourDecksS17ThreeCardsHardFalsy=_.differenceWith(threeCardsCombineS,fourDecksS17ThreeCardsHardTrusy,_.isEqual)
//         function FourDeckS17Soft(playerCards,dealerCard){
//             let options=GameOptions({
//                 numberOfDecks:8,
//                 charlie:false,
//                 hitSoft17:false,
//
//             })
//
//             const handValue=Points(playerCards)
//             const handCount=1
//             return [playerCards,dealerCard,handValue,handCount,options]
//         }
//
//         describe('Two Deck S17 Hard Two hands',function(){
//             describe('stand',function(){
//                 fourDecksS17TwoCardsHardTrusy.forEach(function(value){
//
//                     it(`${value} should return true`,function(){
//                         expect(Stand(...FourDeckS17Soft(...value))).to.be.ok
//                     })
//                 })
//             })
//             describe('Not stand',function(){
//                 fourDecksS17TwoCardsHardFalsy.forEach(function(value){
//                     it(`${value} should return false`,function(){
//                         expect(Stand(...FourDeckS17Soft(...value))).to.not.be.ok
//                     })
//                 })
//             })
//         })
//
//         describe('Two Deck S17 Hard Three hands',function(){
//             describe('stand',function(){
//                 fourDecksS17ThreeCardsHardTrusy.forEach(function(value){
//
//                     it(`${value} should return true`,function(){
//                         expect(Stand(...FourDeckS17Hard(...value))).to.be.ok
//                     })
//                 })
//             })
//             describe('Not stand',function(){
//                 fourDecksS17ThreeCardsHardFalsy.forEach(function(value){
//                     it(`${value} should return false`,function(){
//                         expect(Stand(...FourDeckS17Hard(...value))).to.not.be.ok
//                     })
//                 })
//             })
//         })
//     }
//
//
//     //s17 split
//     {
//         let fourDeckSplitsS17Trusy=[
//
//             [[9,9],7],
//             [[9,9],10],
//             [[9,9],1],
//             [ [ 10, 10 ], 1 ],
//             [ [ 10, 10 ], 2 ],
//             [ [ 10, 10 ], 3 ],
//             [ [ 10, 10 ], 4 ],
//             [ [ 10, 10 ], 5 ],
//             [ [ 10, 10 ], 6 ],
//             [ [ 10, 10 ], 7 ],
//             [ [ 10, 10 ], 8 ],
//             [ [ 10, 10 ], 9 ],
//             [ [ 10, 10 ], 10 ]
//
//         ]
//         let fourDecksSplitS17Falsy=_.differenceWith(twoCardsCombineSplit,fourDeckSplitsS17Trusy,_.isEqual)
//         function FourDeckS17Hard(playerCards,dealerCard){
//             let options=GameOptions({
//                 numberOfDecks:8,
//                 charlie:false,
//                 hitSoft17:false,
//
//             })
//
//             const handValue=Points(playerCards)
//             const handCount=1
//             return [playerCards,dealerCard,handValue,handCount,options]
//         }
//
//         describe('Two Deck S17 Hard Two hands',function(){
//             describe('stand',function(){
//                 fourDeckSplitsS17Trusy.forEach(function(value){
//
//                     it(`${value} should return true`,function(){
//                         expect(Stand(...FourDeckS17Hard(...value))).to.be.ok
//                     })
//                 })
//             })
//             describe('Not stand',function(){
//                 fourDecksSplitS17Falsy.forEach(function(value){
//                     it(`${value} should return false`,function(){
//                         expect(Stand(...FourDeckS17Hard(...value))).to.not.be.ok
//                     })
//                 })
//             })
//         })
//
//
//     }
//
//     //h17 Hard
//
//     {
//         let fourDecksH17HardTrusy=[
//
//             [ 12, 4, false ],
//             [ 12, 5, false ],
//             [ 12, 6, false ],
//
//             [ 13, 2, false ],
//             [ 13, 3, false ],
//             [ 13, 4, false ],
//             [ 13, 5, false ],
//             [ 13, 6, false ],
//
//             [ 14, 2, false ],
//             [ 14, 3, false ],
//             [ 14, 4, false ],
//             [ 14, 5, false ],
//             [ 14, 6, false ],
//
//             [ 15, 2, false ],
//             [ 15, 3, false ],
//             [ 15, 4, false ],
//             [ 15, 5, false ],
//             [ 15, 6, false ],
//
//             [ 16, 2, false ],
//             [ 16, 3, false ],
//             [ 16, 4, false ],
//             [ 16, 5, false ],
//             [ 16, 6, false ],
//
//             [ 17, 1, false ],
//             [ 17, 2, false ],
//             [ 17, 3, false ],
//             [ 17, 4, false ],
//             [ 17, 5, false ],
//             [ 17, 6, false ],
//             [ 17, 7, false ],
//             [ 17, 8, false ],
//             [ 17, 9, false ],
//             [ 17, 10, false ],
//             [ 18, 1, false ],
//             [ 18, 2, false ],
//             [ 18, 3, false ],
//             [ 18, 4, false ],
//             [ 18, 5, false ],
//             [ 18, 6, false ],
//             [ 18, 7, false ],
//             [ 18, 8, false ],
//             [ 18, 9, false ],
//             [ 18, 10, false ],
//             [ 19, 1, false ],
//             [ 19, 2, false ],
//             [ 19, 3, false ],
//             [ 19, 4, false ],
//             [ 19, 5, false ],
//             [ 19, 6, false ],
//             [ 19, 7, false ],
//             [ 19, 8, false ],
//             [ 19, 9, false ],
//             [ 19, 10, false ],
//             [ 20, 1, false ],
//             [ 20, 2, false ],
//             [ 20, 3, false ],
//             [ 20, 4, false ],
//             [ 20, 5, false ],
//             [ 20, 6, false ],
//             [ 20, 7, false ],
//             [ 20, 8, false ],
//             [ 20, 9, false ],
//             [ 20, 10, false ],
//             [ 21, 1, false ],
//             [ 21, 2, false ],
//             [ 21, 3, false ],
//             [ 21, 4, false ],
//             [ 21, 5, false ],
//             [ 21, 6, false ],
//             [ 21, 7, false ],
//             [ 21, 8, false ],
//             [ 21, 9, false ],
//             [ 21, 10, false ],
//         ]
//         let fourDecksH17TwoCardsHardTrusy=makeTwoCardsCombine(fourDecksH17HardTrusy)
//         let fourDecksH17TwoCardsHardFalsy=_.differenceWith(twoCardsCombineH,fourDecksH17TwoCardsHardTrusy,_.isEqual)
//         let fourDecksH17ThreeCardsHardTrusy=makeThreeCardsCombine(fourDecksH17HardTrusy)
//         let fourDecksH17ThreeCardsHardFalsy=_.differenceWith(threeCardsCombineH,fourDecksH17ThreeCardsHardTrusy,_.isEqual)
//         function FourDeckH17Hard(playerCards,dealerCard){
//             let options=GameOptions({
//                 numberOfDecks:8,
//                 charlie:false,
//                 hitSoft17:true,
//
//             })
//
//             const handValue=Points(playerCards)
//             const handCount=1
//             return [playerCards,dealerCard,handValue,handCount,options]
//         }
//
//         describe('Two Deck H17 Hard Two hands',function(){
//             describe('stand',function(){
//                 fourDecksH17TwoCardsHardTrusy.forEach(function(value){
//
//                     it(`${value} should return true`,function(){
//                         expect(Stand(...FourDeckH17Hard(...value))).to.be.ok
//                     })
//                 })
//             })
//             describe('Not stand',function(){
//                 fourDecksH17TwoCardsHardFalsy.forEach(function(value){
//                     it(`${value} should return false`,function(){
//                         expect(Stand(...FourDeckH17Hard(...value))).to.not.be.ok
//                     })
//                 })
//             })
//         })
//
//         describe('Two Deck H17 Hard Three hands',function(){
//             describe('stand',function(){
//                 fourDecksH17ThreeCardsHardTrusy.forEach(function(value){
//
//                     it(`${value} should return true`,function(){
//                         expect(Stand(...FourDeckH17Hard(...value))).to.be.ok
//                     })
//                 })
//             })
//             describe('Not stand',function(){
//                 fourDecksH17ThreeCardsHardFalsy.forEach(function(value){
//                     it(`${value} should return false`,function(){
//                         expect(Stand(...FourDeckH17Hard(...value))).to.not.be.ok
//                     })
//                 })
//             })
//         })
//     }
//
//     //h17 soft
//     {
//         let fourDecksH17SoftTrusy=[
//
//             [ 18, 2, true ],
//             [ 18, 3, true ],
//             [ 18, 4, true ],
//             [ 18, 5, true ],
//             [ 18, 6, true ],
//             [ 18, 7, true ],
//             [ 18, 8, true ],
//
//             [ 19, 1, true ],
//             [ 19, 2, true ],
//             [ 19, 3, true ],
//             [ 19, 4, true ],
//             [ 19, 5, true ],
//             [ 19, 6, true ],
//             [ 19, 7, true ],
//             [ 19, 8, true ],
//             [ 19, 9, true ],
//             [ 19, 10, true ],
//             [ 20, 1, true ],
//             [ 20, 2, true ],
//             [ 20, 3, true ],
//             [ 20, 4, true ],
//             [ 20, 5, true ],
//             [ 20, 6, true ],
//             [ 20, 7, true ],
//             [ 20, 8, true ],
//             [ 20, 9, true ],
//             [ 20, 10, true ],
//             [ 21, 1, true ],
//             [ 21, 2, true ],
//             [ 21, 3, true ],
//             [ 21, 4, true ],
//             [ 21, 5, true ],
//             [ 21, 6, true ],
//             [ 21, 7, true ],
//             [ 21, 8, true ],
//             [ 21, 9, true ],
//             [ 21, 10, true ],
//
//         ]
//
//         let fourDecksH17TwoCardsHardTrusy=makeTwoCardsCombine(fourDecksH17SoftTrusy)
//         let fourDecksH17TwoCardsHardFalsy=_.differenceWith(twoCardsCombineS,fourDecksH17TwoCardsHardTrusy,_.isEqual)
//         let fourDecksH17ThreeCardsHardTrusy=makeThreeCardsCombine(fourDecksH17SoftTrusy)
//         let fourDecksH17ThreeCardsHardFalsy=_.differenceWith(threeCardsCombineS,fourDecksH17ThreeCardsHardTrusy,_.isEqual)
//         function FourDeckH17Soft(playerCards,dealerCard){
//             let options=GameOptions({
//                 numberOfDecks:8,
//                 charlie:false,
//                 hitSoft17:true,
//
//             })
//
//             const handValue=Points(playerCards)
//             const handCount=1
//             return [playerCards,dealerCard,handValue,handCount,options]
//         }
//
//         describe('Two Deck H17 Hard Two hands',function(){
//             describe('stand',function(){
//                 fourDecksH17TwoCardsHardTrusy.forEach(function(value){
//
//                     it(`${value} should return true`,function(){
//                         expect(Stand(...FourDeckH17Soft(...value))).to.be.ok
//                     })
//                 })
//             })
//             describe('Not stand',function(){
//                 fourDecksH17TwoCardsHardFalsy.forEach(function(value){
//                     it(`${value} should return false`,function(){
//                         expect(Stand(...FourDeckH17Soft(...value))).to.not.be.ok
//                     })
//                 })
//             })
//         })
//
//         describe('Two Deck H17 Hard Three hands',function(){
//             describe('stand',function(){
//                 fourDecksH17ThreeCardsHardTrusy.forEach(function(value){
//
//                     it(`${value} should return true`,function(){
//                         expect(Stand(...FourDeckH17Hard(...value))).to.be.ok
//                     })
//                 })
//             })
//             describe('Not stand',function(){
//                 fourDecksH17ThreeCardsHardFalsy.forEach(function(value){
//                     it(`${value} should return false`,function(){
//                         expect(Stand(...FourDeckH17Hard(...value))).to.not.be.ok
//                     })
//                 })
//             })
//         })
//     }
//
//
//     //h17 split
//     {
//         let fourDeckSplitsH17Trusy=[
//
//             [[9,9],7],
//             [[9,9],10],
//             [[9,9],1],
//             [ [ 10, 10 ], 1 ],
//             [ [ 10, 10 ], 2 ],
//             [ [ 10, 10 ], 3 ],
//             [ [ 10, 10 ], 4 ],
//             [ [ 10, 10 ], 5 ],
//             [ [ 10, 10 ], 6 ],
//             [ [ 10, 10 ], 7 ],
//             [ [ 10, 10 ], 8 ],
//             [ [ 10, 10 ], 9 ],
//             [ [ 10, 10 ], 10 ]
//         ]
//         let fourDecksSplitH17Falsy=_.differenceWith(twoCardsCombineSplit,fourDeckSplitsH17Trusy,_.isEqual)
//         function FourDeckH17Hard(playerCards,dealerCard){
//             let options=GameOptions({
//                 numberOfDecks:8,
//                 charlie:false,
//                 hitSoft17:true,
//
//             })
//
//             const handValue=Points(playerCards)
//             const handCount=1
//             return [playerCards,dealerCard,handValue,handCount,options]
//         }
//
//         describe('Two Deck H17 Hard Two hands',function(){
//             describe('stand',function(){
//                 fourDeckSplitsH17Trusy.forEach(function(value){
//
//                     it(`${value} should return true`,function(){
//                         expect(Stand(...FourDeckH17Hard(...value))).to.be.ok
//                     })
//                 })
//             })
//             describe('Not stand',function(){
//                 fourDecksSplitH17Falsy.forEach(function(value){
//                     it(`${value} should return false`,function(){
//                         expect(Stand(...FourDeckH17Hard(...value))).to.not.be.ok
//                     })
//                 })
//             })
//         })
//
//
//     }
// }


